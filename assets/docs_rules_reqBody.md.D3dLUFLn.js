import{_ as e,c as t,o as s,ae as o}from"./chunks/framework.Dgg8-8ov.js";const b=JSON.parse('{"title":"reqBody","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/reqBody.md","filePath":"docs/rules/reqBody.md"}'),l={name:"docs/rules/reqBody.md"};function d(n,a,p,r,i,h){return s(),t("div",null,a[0]||(a[0]=[o('<h1 id="reqbody" tabindex="-1">reqBody <a class="header-anchor" href="#reqbody" aria-label="Permalink to &quot;reqBody&quot;">​</a></h1><p>替换指定请求的内容体（仅对包含内容体的请求有效，如 <code>POST</code>、<code>PUT</code> 等）</p><blockquote><p>⚠️ 注意：GET、HEAD 等无内容体的请求不受影响</p></blockquote><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern reqBody://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>文本或二进制内容，支持以下类型：<br>• 目录/文件路径<br>• 远程 URL<br>• 内联/内嵌/Values内容</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><h4 id="内联方式" tabindex="-1">内联方式 <a class="header-anchor" href="#内联方式" aria-label="Permalink to &quot;内联方式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path reqBody://(Hello) method://post</span></span></code></pre></div><p>请求 <code>https://www.example.com/path/to</code> 请求内容变成 <code>Hello</code>。</p><h4 id="内嵌-values方式" tabindex="-1">内嵌/Values方式 <a class="header-anchor" href="#内嵌-values方式" aria-label="Permalink to &quot;内嵌/Values方式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` body.txt</span></span>\n<span class="line"><span>Hello world.</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>www.example.com/path reqBody://{body.txt} method://post</span></span></code></pre></div><p>请求 <code>https://www.example.com/path/to</code> 请求内容变成 <code>Hello world.</code>。</p><h4 id="本地-远程资源" tabindex="-1">本地/远程资源 <a class="header-anchor" href="#本地-远程资源" aria-label="Permalink to &quot;本地/远程资源&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 reqBody:///User/xxx/test.txt</span></span>\n<span class="line"><span>www.example.com/path2 reqBody://https://www.xxx.com/xxx/params.txt</span></span>\n<span class="line"><span># 通过编辑临时文件</span></span>\n<span class="line"><span>www.example.com/path3 reqBody://temp/blank.txt</span></span></code></pre></div><h2 id="关联协议" tabindex="-1">关联协议 <a class="header-anchor" href="#关联协议" aria-label="Permalink to &quot;关联协议&quot;">​</a></h2><ol><li>在请求内容前面注入内容：<a href="./reqPrepend.html">reqPrepend</a></li><li>在请求内容后面追加内容：<a href="./reqAppend.html">reqAppend</a></li><li>替换响应内容：<a href="./reqBody.html">reqBody</a></li></ol>',17)]))}const u=e(l,[["render",d]]);export{b as __pageData,u as default};
