import{_ as e,c as a,o as d,ae as s}from"./chunks/framework.Dgg8-8ov.js";const u=JSON.parse('{"title":"reqScript","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/reqScript.md","filePath":"docs/rules/reqScript.md"}'),r={name:"docs/rules/reqScript.md"};function l(n,t,p,o,i,c){return d(),a("div",null,t[0]||(t[0]=[s(`<h1 id="reqscript" tabindex="-1">reqScript <a class="header-anchor" href="#reqscript" aria-label="Permalink to &quot;reqScript&quot;">​</a></h1><p>在请求阶段通过 JavaScript 脚本动态生成规则，实现复杂请求处理逻辑。脚本可以访问请求上下文信息，并动态生成匹配规则。</p><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern reqScript://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>生成规则的 JS 脚本，支持以下类型：<br>• 目录/文件路径<br>• 远程 URL<br>• 内联/内嵌/Values内容</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`\`\` test.js</span></span>
<span class="line"><span>if (method === &#39;GET&#39;) {</span></span>
<span class="line"><span>    rules.push(&#39;* resType://text&#39;);</span></span>
<span class="line"><span>    rules.push(&#39;* file://(&lt;div&gt;GET-Request&lt;/div&gt;)&#39;);</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>    rules.push(&#39;* resStatus://403&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path reqScript://{test.js}</span></span></code></pre></div><p>访问 <code>https://www.example.com/path/to</code> 返回内容：</p><h4 id="可用全局变量" tabindex="-1">可用全局变量 <a class="header-anchor" href="#可用全局变量" aria-label="Permalink to &quot;可用全局变量&quot;">​</a></h4><table tabindex="0"><thead><tr><th>变量/方法</th><th>描述</th></tr></thead><tbody><tr><td><code>url</code></td><td>完整请求URL</td></tr><tr><td><code>method</code></td><td>请求方法(GET/POST等)</td></tr><tr><td><code>ip</code>/<code>clientIp</code></td><td>客户端IP地址</td></tr><tr><td><code>headers</code></td><td>请求头对象</td></tr><tr><td><code>body</code></td><td>请求内容(最大16KB)</td></tr><tr><td><code>rules</code></td><td>规则数组，通过push添加新规则</td></tr><tr><td><code>values</code></td><td>临时值存储对象</td></tr><tr><td><code>render(tpl,data)</code></td><td>微型模板渲染函数</td></tr><tr><td><code>getValue(key)</code></td><td>获取Values中的值</td></tr><tr><td><code>parseUrl</code></td><td>同Node.js的<code>url.parse</code></td></tr><tr><td><code>parseQuery</code></td><td>同Node.js的<code>querystring.parse</code></td></tr></tbody></table><h2 id="关联协议" tabindex="-1">关联协议 <a class="header-anchor" href="#关联协议" aria-label="Permalink to &quot;关联协议&quot;">​</a></h2><ol><li>请求阶段脚本规则：<a href="./reqScript.html">reqScript</a></li><li>请求阶段批量规则：<a href="./reqScript.html">reqRules</a></li><li>响应阶段批量规则：<a href="./resRules.html">resRules</a></li><li>更复杂的定制需求：<a href="./../extensions/dev.html">插件开发</a></li></ol>`,12)]))}const b=e(r,[["render",l]]);export{u as __pageData,b as default};
