import{_ as t,c as s,o as p,ae as e}from"./chunks/framework.Dgg8-8ov.js";const x=JSON.parse('{"title":"https-proxy","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/https-proxy.md","filePath":"docs/rules/https-proxy.md"}'),n={name:"docs/rules/https-proxy.md"};function o(l,a,r,i,c,d){return p(),s("div",null,a[0]||(a[0]=[e(`<h1 id="https-proxy" tabindex="-1">https-proxy <a class="header-anchor" href="#https-proxy" aria-label="Permalink to &quot;https-proxy&quot;">​</a></h1><p><code>https-proxy</code> 指令用于将匹配的请求通过指定的 HTTPS 代理服务器转发。</p><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern https-proxy://ipOrDomain[:port] [filters...]</span></span></code></pre></div><blockquote><p><code>port</code> 可选，不填则使用默认端口 <code>443</code></p></blockquote><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>IP + 可选端口 或域名 + 可选端口<br>⚠️ 不支持从文件/远程 URL 加载数据</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 将请求代理到 HTTPS 代理: \`127.0.0.1:443\`</span></span>
<span class="line"><span>www.example.com/path https-proxy://127.0.0.1 # 默认端口 443</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将当前域名的所有请求代理到 HTTPS 代理: \`127.0.0.1:8080\`</span></span>
<span class="line"><span>www.example.com https-proxy://127.0.0.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 也可以用域名</span></span>
<span class="line"><span>www.example.com/path https-proxy://test.proxy.com # 默认端口 443</span></span>
<span class="line"><span>www.example.com https-proxy://test.proxy.com:8080</span></span></code></pre></div><h2 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-label="Permalink to &quot;高级用法&quot;">​</a></h2><p>默认情况下，上游代理会自行解析请求的域名。但某些场景下，你可能希望强制代理直接访问指定的目标 IP（跳过 DNS 解析），例如：</p><ul><li>绕过 DNS 污染</li><li>直接访问特定后端 IP</li><li>测试不同环境的服务</li></ul><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 通过查询参数</span></span>
<span class="line"><span>www.example.com https-proxy://127.0.0.1:8080?host=1.1.1.1</span></span>
<span class="line"><span>www.example.com https-proxy://127.0.0.1:8080?host=1.1.1.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 通过指令启用</span></span>
<span class="line"><span>www.example.com https-proxy://127.0.0.1:8080 1.1.1.1 enable://proxyHost</span></span>
<span class="line"><span>www.example.com https-proxy://127.0.0.1:8080 1.1.1.1:8080 enable://proxyHost</span></span></code></pre></div><blockquote><p><code>1.1.1.1</code> 等价于 <code>host://1.1.1.1</code></p></blockquote>`,13)]))}const m=t(n,[["render",o]]);export{x as __pageData,m as default};
