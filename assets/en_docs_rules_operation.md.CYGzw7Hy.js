import{_ as a}from"./chunks/values-demo1.CKp8x0mH.js";import{_ as s,c as n,o as t,ae as l}from"./chunks/framework.Dgg8-8ov.js";const b=JSON.parse('{"title":"operation","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/operation.md","filePath":"en/docs/rules/operation.md"}'),p={name:"en/docs/rules/operation.md"};function o(i,e,r,d,c,h){return t(),n("div",null,e[0]||(e[0]=[l('<h1 id="operation" tabindex="-1">operation <a class="header-anchor" href="#operation" aria-label="Permalink to &quot;operation&quot;">​</a></h1><p>In Whistle, each rule consists of a matching pattern (<code>pattern</code>) and an operation (<code>operation</code>). The general syntax of <code>operation</code> is:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>protocol://[value]</span></span></code></pre></div><ul><li><strong>protocol</strong>: Specifies the operation type (e.g., <code>file</code>, <code>proxy</code>, <code>resReplace</code>, etc.)</li><li><strong>value</strong>: The operation content (supports multiple formats, see below)</li></ul><h2 id="inline-value" tabindex="-1">Inline Value <a class="header-anchor" href="#inline-value" aria-label="Permalink to &quot;Inline Value&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern reqHeaders://x-proxy=Whistle # Set request headers</span></span>\n<span class="line"><span>pattern statusCode://404 # Modify the status code</span></span>\n<span class="line"><span>pattern file://({&quot;ec&quot;:0}) # Respond to the request with inline content (the value enclosed in parentheses: `{&quot;ec&quot;:0}`)</span></span></code></pre></div><p>When the operation content (value) contains spaces, newlines, or special characters, the inline method cannot be used directly. Instead, use the following method:</p><h2 id="embedded-value" tabindex="-1">embedded value <a class="header-anchor" href="#embedded-value" aria-label="Permalink to &quot;embedded value&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>```ua.txt</span></span>\n<span class="line"><span>Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>pattern ua://{ua.txt}</span></span></code></pre></div><p>Equivalent to</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` headers.json</span></span>\n<span class="line"><span>user-agent: Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>pattern reqHeaders://{headers.json}</span></span></code></pre></div><h2 id="values-reference" tabindex="-1">Values Reference <a class="header-anchor" href="#values-reference" aria-label="Permalink to &quot;Values Reference&quot;">​</a></h2><p>When an operation value needs to be shared by multiple rules, embedding it directly in the rules will prevent reuse. You can now store these values in the Values module of the Whistle interface and reference them using keys:</p><ol><li>Create a key named <code>result.json</code> in the Values module and fill in the action content.</li><li>Reference them in the rule using <code>{result.json}</code>, for example: <code>www.test.com/cgi-bin/test file://{result.json}</code></li></ol><img src="'+a+'" width="420"><h2 id="files-remote-resources" tabindex="-1">Files/Remote Resources <a class="header-anchor" href="#files-remote-resources" aria-label="Permalink to &quot;Files/Remote Resources&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern reqHeaders:///User/xxx/filepath # Load action content from a local file</span></span>\n<span class="line"><span>pattern resHeadrs://https://example.com/config.json # Load a JSON object remotely</span></span>\n<span class="line"><span>pattern resHeaders://temp/blank.json # Use a temporary file on the border</span></span></code></pre></div><blockquote><p>⚠️ Note: http/https/ws/wss/tunnel/host/enable/cache... Protocols such as HTTPS and HTTPS prohibit accessing content via file paths or remote URLs. For details, see the documentation for each protocol.</p></blockquote><h2 id="parentheses-used" tabindex="-1">Parentheses Used <a class="header-anchor" href="#parentheses-used" aria-label="Permalink to &quot;Parentheses Used&quot;">​</a></h2><p>In Whistle rules, the value portion of protocol://value can contain three types of indirect references:</p><ol><li><code>{key}</code> - References an embedded value</li><li><code>remote-url</code> - References a remote resource address</li><li><code>localfilepath</code> - References a local file path</li></ol><p>When you need to directly reference the above content (rather than the content indirectly referenced) as the action content, you can enclose it in parentheses:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>protocol://(value)</span></span></code></pre></div><p>Example:</p><ol><li><code>reqHeaders:///User/xxx/yyy.txt</code> - Loads the action content from the local file <code>/User/xxx/yyy.txt</code></li><li><code>reqHeaders://(/User/xxx/yyy.txt)</code> - Uses <code>/User/xxx/yyy.txt</code> directly as the action content</li></ol><h2 id="template-strings" tabindex="-1">Template Strings <a class="header-anchor" href="#template-strings" aria-label="Permalink to &quot;Template Strings&quot;">​</a></h2><p>Whistle provides a template string feature similar to ES6, allowing you to dynamically reference request information and apply it to rule configuration. The following template strings are supported:</p><h5 id="general-inline-values" tabindex="-1">General inline values <a class="header-anchor" href="#general-inline-values" aria-label="Permalink to &quot;General inline values&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern protocol://`...${version}...`</span></span></code></pre></div><h5 id="inline-values-or-values-references" tabindex="-1">Inline values or Values references <a class="header-anchor" href="#inline-values-or-values-references" aria-label="Permalink to &quot;Inline values or Values references&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>\n<span class="line"><span>``` test.key</span></span>\n<span class="line"><span>...${reqId}...</span></span>\n<span class="line"><span>...${version}...</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>pattern protocol://`{test.key}`</span></span></code></pre></div><h5 id="parenthesized-content" tabindex="-1">Parenthesized content <a class="header-anchor" href="#parenthesized-content" aria-label="Permalink to &quot;Parenthesized content&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern protocol://`(...${now}...)`</span></span></code></pre></div><h5 id="string-variables" tabindex="-1">String variables <a class="header-anchor" href="#string-variables" aria-label="Permalink to &quot;String variables&quot;">​</a></h5><table tabindex="0"><thead><tr><th>Variable name</th><th>Value</th></tr></thead><tbody><tr><td><code>${now}</code></td><td>Date.now()</td></tr><tr><td><code>${random}</code></td><td>Math.random()</td></tr><tr><td><code>${randomUUID}</code></td><td>crypto.randomUUID ? crypto.randomUUID()</td></tr><tr><td><code>${reqId}</code></td><td>The ID assigned by Whistle to each request</td></tr><tr><td><code>${url.protocol}</code></td><td>url.parse(fullUrl).protocol</td></tr><tr><td><code>${url.hostname}</code></td><td>url.parse(fullUrl).hostname</td></tr><tr><td><code>${url.host}</code></td><td>url.parse(fullUrl).host</td></tr><tr><td><code>${url.port}</code></td><td>url.parse(fullUrl).port</td></tr><tr><td><code>${url.path}</code></td><td>url.parse(fullUrl).path</td></tr><tr><td><code>${url.pathname}</code></td><td>url.parse(fullUrl).pathname</td></tr><tr><td><code>${url.search}</code></td><td>url.parse(fullUrl).search</td></tr><tr><td><code>${query.xxx}</code></td><td>Value of request parameter <code>xxx</code></td></tr><tr><td><code>${url}</code></td><td>Full request URL</td></tr><tr><td><code>${querystring}</code></td><td>url.parse(fullUrl).search || &#39;?&#39; (not empty)</td></tr><tr><td><code>${searchstring}</code></td><td>url.parse(fullUrl).search || &#39;?&#39; (not empty)</td></tr><tr><td><code>${method}</code></td><td>Request method</td></tr><tr><td><code>${reqHeaders.xxx}</code></td><td>Value of request header field <code>xxx</code></td></tr><tr><td><code>${resHeaders.xxx}</code></td><td>Value of response header field <code>xxx</code></td></tr><tr><td><code>${version}</code></td><td>Whistle version number</td></tr><tr><td><code>${port}</code></td><td>Whistle port number</td></tr><tr><td><code>${host}</code></td><td>The network interface IP address Whistle listens on when it starts (blank by default)</td></tr><tr><td><code>${realPort}</code></td><td>The port displayed in the Online dialog box of the Whistle interface (usually the Whistle port number)</td></tr><tr><td><code>${realHost}</code></td><td>The host displayed in the Online dialog box of the Whistle interface (usually the network interface IP address Whistle listens on)</td></tr><tr><td><code>${clientIp}</code></td><td>Client IP address</td></tr><tr><td><code>${clientPort}</code></td><td>Client port address</td></tr><tr><td><code>${serverIp}</code></td><td>Server IP address</td></tr><tr><td><code>${serverPort}</code></td><td>Server port address</td></tr><tr><td><code>${reqCookies.xxx}</code></td><td>The value of the request cookie <code>xxx</code></td></tr><tr><td><code>${resCookies.xxx}</code></td><td>The value of the response cookie <code>xxx</code></td></tr><tr><td><code>${statusCode}</code></td><td>The response status code</td></tr><tr><td><code>${env.xxx}</code></td><td>process.env.xxx</td></tr><tr><td><code>${whistle.plugin-name}</code></td><td><code>value</code> of <code>whistle.plugin-name://value</code> or <code>plugin-name://value</code></td></tr></tbody></table><blockquote><p><code>${whistle.plugin-name}</code> can only have a value in plugin rules.</p></blockquote><h5 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` test.txt</span></span>\n<span class="line"><span>now: ${now}</span></span>\n<span class="line"><span>random: ${random}</span></span>\n<span class="line"><span>randomUUID: ${randomUUID}</span></span>\n<span class="line"><span>reqId: ${reqId}</span></span>\n<span class="line"><span>url.protocol: ${url.protocol}</span></span>\n<span class="line"><span>url.hostname: ${url.hostname}</span></span>\n<span class="line"><span>url.host: ${url.host}</span></span>\n<span class="line"><span>url.port: ${url.port}</span></span>\n<span class="line"><span>url.path: ${url.path}</span></span>\n<span class="line"><span>url.pathname: ${url.pathname}</span></span>\n<span class="line"><span>url.search; ${url.search}</span></span>\n<span class="line"><span>query: ${query.name}</span></span>\n<span class="line"><span>url: ${url}</span></span>\n<span class="line"><span>querystring: ${querystring}</span></span>\n<span class="line"><span>searchstring: ${searchstring}</span></span>\n<span class="line"><span>method: ${method}</span></span>\n<span class="line"><span>reqHeaders.accept: ${reqHeaders.accept}</span></span>\n<span class="line"><span>resHeaders.content-type: ${resHeaders.content-type}</span></span>\n<span class="line"><span>version: ${version}</span></span>\n<span class="line"><span>port: ${port}</span></span>\n<span class="line"><span>host: ${host}</span></span>\n<span class="line"><span>realPort: ${realPort}</span></span>\n<span class="line"><span>realHost: ${realHost}</span></span>\n<span class="line"><span>clientIp: ${clientIp}</span></span>\n<span class="line"><span>clientPort: ${clientPort}</span></span>\n<span class="line"><span>serverIp: ${serverIp}</span></span>\n<span class="line"><span>serverPort: ${serverPort}</span></span>\n<span class="line"><span>reqCookies.test: ${reqCookies.test}</span></span>\n<span class="line"><span>resCookies.test: ${resCookies.test}</span></span>\n<span class="line"><span>statusCode: ${statusCode}</span></span>\n<span class="line"><span>env.USER: ${env.USER}</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>www.test.com/index.html file://`{test.txt}`</span></span></code></pre></div><p>Visit <code>https://www.test.com/index.html?name=avenwu</code> and the response content is:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>now: 1752301623295</span></span>\n<span class="line"><span>random: 0.6819241513880432</span></span>\n<span class="line"><span>randomUUID: e917b9fc-e2ef-4255-9209-11eb417235c5</span></span>\n<span class="line"><span>reqId: 1752301623294-339</span></span>\n<span class="line"><span>url.protocol: https:</span></span>\n<span class="line"><span>url.hostname: www.test.com</span></span>\n<span class="line"><span>url.host: www.test.com</span></span>\n<span class="line"><span>url.port: </span></span>\n<span class="line"><span>url.path: /index.html?name=avenwu</span></span>\n<span class="line"><span>url.pathname: /index.html</span></span>\n<span class="line"><span>url.search; ?name=avenwu</span></span>\n<span class="line"><span>query: avenwu</span></span>\n<span class="line"><span>url: https://www.test.com/index.html?name=avenwu</span></span>\n<span class="line"><span>querystring: ?name=avenwu</span></span>\n<span class="line"><span>searchstring: ?name=avenwu</span></span>\n<span class="line"><span>method: GET</span></span>\n<span class="line"><span>reqHeaders.accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>\n<span class="line"><span>resHeaders.content-type: </span></span>\n<span class="line"><span>version: 2.9.100</span></span>\n<span class="line"><span>port: 8899</span></span>\n<span class="line"><span>host: </span></span>\n<span class="line"><span>realPort: 8899</span></span>\n<span class="line"><span>realHost: </span></span>\n<span class="line"><span>clientIp: 127.0.0.1</span></span>\n<span class="line"><span>clientPort: 60582</span></span>\n<span class="line"><span>serverIp: </span></span>\n<span class="line"><span>serverPort: </span></span>\n<span class="line"><span>reqCookies.test: </span></span>\n<span class="line"><span>resCookies.test: </span></span>\n<span class="line"><span>statusCode: </span></span>\n<span class="line"><span>env.USER: av</span></span></code></pre></div><h2 id="data-objects" tabindex="-1">Data Objects <a class="header-anchor" href="#data-objects" aria-label="Permalink to &quot;Data Objects&quot;">​</a></h2><p>In addition to text or binary content, the operation content may also be a JSON object. Whistle supports the following three data object formats:</p><h4 id="json-format" tabindex="-1">JSON Format <a class="header-anchor" href="#json-format" aria-label="Permalink to &quot;JSON Format&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;key1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: value1,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;key2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: value2,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;keyN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: valueN</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="line-format" tabindex="-1">Line Format <a class="header-anchor" href="#line-format" aria-label="Permalink to &quot;Line Format&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>key1: value1</span></span>\n<span class="line"><span>key2: value2</span></span>\n<span class="line"><span>keyN: valueN</span></span></code></pre></div><blockquote><p>Separated by <code>colon+space</code>. If there is no <code>colon+space</code>, the first colon is used as the separator. If there is no colon, <code>value</code> is an empty string.</p></blockquote><p><strong>Multi-level nesting:</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a.b.c: 123</span></span>\n<span class="line"><span>c\\.d\\.e: abc</span></span></code></pre></div><p>Equivalent to:</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;c.d.e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="inline-format-request-parameter-format" tabindex="-1">Inline Format (Request Parameter Format) <a class="header-anchor" href="#inline-format-request-parameter-format" aria-label="Permalink to &quot;Inline Format (Request Parameter Format)&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>key1=value1&amp;key2=value2&amp;keyN=valueN</span></span></code></pre></div><blockquote><p>It&#39;s best to encodeURIComponent both <code>key</code> and <code>value</code>.</p></blockquote><h2 id="operation-protocols" tabindex="-1">Operation Protocols <a class="header-anchor" href="#operation-protocols" aria-label="Permalink to &quot;Operation Protocols&quot;">​</a></h2><p>Each protocol (<code>protocol</code>) corresponds to a specific operation type and is used to handle matching requests. The protocol determines the operation type and the format requirements for the operation content. For detailed usage, see <a href="./protocols.html">Protocol List</a>.</p>',56)]))}const g=s(p,[["render",o]]);export{b as __pageData,g as default};
