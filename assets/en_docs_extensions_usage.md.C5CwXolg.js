import{_ as i}from"./chunks/install-plugins.DMiAk7mn.js";import{_ as e}from"./chunks/plugin-list.DYOLz5T9.js";import{_ as a,c as t,o,ae as s}from"./chunks/framework.Dgg8-8ov.js";const k=JSON.parse('{"title":"使用插件","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/extensions/usage.md","filePath":"en/docs/extensions/usage.md"}'),r={name:"en/docs/extensions/usage.md"};function n(p,l,u,h,c,d){return o(),t("div",null,l[0]||(l[0]=[s('<h1 id="使用插件" tabindex="-1">使用插件 <a class="header-anchor" href="#使用插件" aria-label="Permalink to &quot;使用插件&quot;">​</a></h1><h2 id="安装插件" tabindex="-1">安装插件 <a class="header-anchor" href="#安装插件" aria-label="Permalink to &quot;安装插件&quot;">​</a></h2><ol><li>点击左侧导航栏的 Plugins 标签页</li><li>点击顶部的 Install 按钮</li><li>在弹出窗口中输入插件名称（支持同时安装多个插件）： <ul><li>多个插件用空格或换行符分隔</li><li>可指定自定义 npm 镜像源： <ul><li>直接在插件名后添加 --registry=镜像地址</li><li>或从下拉列表选择历史使用过的镜像源</li></ul></li></ul></li></ol><img width="1000" alt="install plugins" src="'+i+'"><blockquote><p>文本框中的冗余文本不会影响结果，Whistle 会自动过滤文本框中的冗余文本，仅提取插件名称及 registry 安装信息</p></blockquote><p>安装成功后，稍等片刻即可在插件列表中查看新安装的插件：</p><img width="1000" alt="plugins" src="'+e+`"><h2 id="自定义协议" tabindex="-1">自定义协议 <a class="header-anchor" href="#自定义协议" aria-label="Permalink to &quot;自定义协议&quot;">​</a></h2><p>每个插件可注册两种协议类型，配置方式跟普通协议一样：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 长协议</span></span>
<span class="line"><span>pattern whistle.plugin-name://value [inludeFilter://pattern1 ... excludeFilter://pattern2 ...]</span></span>
<span class="line"><span># 短协议</span></span>
<span class="line"><span>pattern plugin-name://value [inludeFilter://pattern1 ... excludeFilter://pattern2 ...]</span></span></code></pre></div><h2 id="hooks-功能" tabindex="-1">Hooks 功能 <a class="header-anchor" href="#hooks-功能" aria-label="Permalink to &quot;Hooks 功能&quot;">​</a></h2><p>Whistle 将匹配插件规则的请求与插件对应 Hook 进行交互，可实现以下功能：</p><blockquote><p>插件协议的具体功能看各个插件的帮助文档，插件也可以选择隐藏这些协议</p></blockquote><ol><li>自动生成并下发 HTTPS 证书</li><li>对代理请求的认证控制，要求用户提供凭证才能访</li><li>实时获取请求头、响应状态码等元数据</li><li>对请求动态设置规则</li><li>将请求转发给插件，由插件完全控制请求处理流程（需要匹配短协议才能实现）</li></ol><h2 id="pipe-功能" tabindex="-1">pipe 功能 <a class="header-anchor" href="#pipe-功能" aria-label="Permalink to &quot;pipe 功能&quot;">​</a></h2><p>有些请求/响应内容可能被加密或 protobuf 序列化无法看到明文，可通过以下两种方式实现内容查看与修改：</p><ol><li><strong>插件全权处理</strong><ul><li>将请求直接转发至插件</li><li>插件完全控制处理流程</li><li>注意事项： <ul><li>Whistle 内置规则将失效</li><li>需插件自行实现所有处理逻辑</li><li>如需在抓包界面显示解密内容，插件必须调用 Whistle API 回传数据</li></ul></li></ul></li><li><strong>管道流式处理（推荐）</strong><ul><li>通过 pipe 协议建立处理管道</li><li>请求/响应流程： <ul><li>进入 Whistle 时：插件解密</li><li>离开 Whistle 时：插件加密</li></ul></li><li>优势： <ul><li>保持明文请求特性</li><li>完整支持 Whistle 内置规则</li><li>抓包界面可直接查看明文</li></ul></li></ul></li></ol><p><strong>技术说明：</strong></p><ul><li>pipe 流功能为可选实现，各插件支持情况请查阅具体文档</li><li>方案二处理后的请求完全等同于普通明文请求</li></ul><h2 id="操作界面" tabindex="-1">操作界面 <a class="header-anchor" href="#操作界面" aria-label="Permalink to &quot;操作界面&quot;">​</a></h2><h4 id="访问插件操作界面" tabindex="-1">访问插件操作界面 <a class="header-anchor" href="#访问插件操作界面" aria-label="Permalink to &quot;访问插件操作界面&quot;">​</a></h4><p>在 Whistle 插件管理面板中，您可以通过以下任一方式访问插件功能：</p><ol><li>点击插件条目右侧的 <code>Option</code> 按钮</li><li>在插件列表直接单击插件名称</li></ol><h4 id="界面特性" tabindex="-1">界面特性 <a class="header-anchor" href="#界面特性" aria-label="Permalink to &quot;界面特性&quot;">​</a></h4><p><strong>呈现形式：</strong> 模态对话框或独立标签页</p><p><strong>核心能力：</strong></p><ol><li>提供可视化配置和管理功能</li><li>支持与 Whistle 核心的实时交互</li><li>显示插件运行状态、请求统计数据、日志信息等</li></ol><h4 id="技术说明" tabindex="-1">技术说明 <a class="header-anchor" href="#技术说明" aria-label="Permalink to &quot;技术说明&quot;">​</a></h4><ol><li>插件本质上是与 Whistle 直接交互的 HTTP Server</li><li>操作界面的具体功能由各插件自行实现</li><li>插件可选择不提供操作界面（仅提供后台服务或<a href="./../cli.html#w2-exec">命令行操作</a>）</li></ol><h2 id="扩展-whistle-界面" tabindex="-1">扩展 Whistle 界面 <a class="header-anchor" href="#扩展-whistle-界面" aria-label="Permalink to &quot;扩展 Whistle 界面&quot;">​</a></h2><p>插件可通过以下方式增强 Whistle 的用户界面功能：</p><h4 id="network-扩展" tabindex="-1">Network 扩展 <a class="header-anchor" href="#network-扩展" aria-label="Permalink to &quot;Network 扩展&quot;">​</a></h4><ol><li>抓包列表上下文菜单 <blockquote><p>在抓包列表项右键菜单中添加自定义操作</p></blockquote></li><li>主视图标签页 <blockquote><p>在右侧主面板区创建一级功能标签页</p></blockquote></li><li>Inspectors 分析工具扩展 <blockquote><p>在 Inspectors 面板下添加：</p><ul><li>二级功能标签页</li><li>三级详细视图标签页</li></ul></blockquote></li><li>Composer 请求构造器扩展 <blockquote><p>在 Composer 工具区添加二级功能标签页</p></blockquote></li><li>Tools 工具集扩展 <blockquote><p>在 Tools 功能区添加二级功能标签页</p></blockquote></li></ol><h4 id="rules-扩展" tabindex="-1">Rules 扩展 <a class="header-anchor" href="#rules-扩展" aria-label="Permalink to &quot;Rules 扩展&quot;">​</a></h4><p>左侧列表上下文菜单</p><blockquote><p>在左侧规则文件列表的右键菜单中添加功能项</p></blockquote><h4 id="values-扩展" tabindex="-1">Values 扩展 <a class="header-anchor" href="#values-扩展" aria-label="Permalink to &quot;Values 扩展&quot;">​</a></h4><p>左侧列表上下文菜单</p><blockquote><p>在左侧变量文件列表的右键菜单中添加功能项</p></blockquote><p><strong>实现说明：</strong></p><ul><li>各插件可根据功能需求选择适当的扩展位置</li><li>具体扩展功能和实现方式请参阅各插件的开发文档</li><li>未使用的扩展点不会影响插件基础功能</li></ul><h2 id="插件内置规则" tabindex="-1">插件内置规则 <a class="header-anchor" href="#插件内置规则" aria-label="Permalink to &quot;插件内置规则&quot;">​</a></h2><p>插件支持通过以下规则文件扩展系统功能：</p><ol><li><strong>全局规则 (rules.txt)</strong><ul><li>自动加载时机： 插件初始化时</li><li>作用范围： 全局请求</li><li>优先级： 低于 Rules 界面配置的规则</li><li>典型用途： 插件默认规则配置</li></ul></li><li><strong>私有规则 (_rules.txt)</strong><ul><li>触发条件： 匹配插件自定义协议的请求</li><li>生效阶段： 请求处理流程</li><li>执行顺序： 在全局规则之后应用</li><li>典型用途： 请求预处理/改写</li></ul></li><li><strong>响应阶段规则 (resRules.txt)</strong><ul><li>触发条件： 匹配插件自定义协议的请求</li><li>生效阶段： 响应处理流程</li><li>执行顺序： 在全局规则之后应用</li><li>典型用途： 响应后处理/改写</li></ul></li></ol><p>插件支持灵活的内置规则配置机制：</p><ul><li><strong>可选性：</strong> 所有内置规则均为可选配置</li><li><strong>按需设置：</strong> 插件只需声明必要的规则</li><li><strong>规则查看：</strong> 通过插件管理界面的 Rules 按钮可查看当前插件配置的所有规则</li></ul><blockquote><p>注意：未配置规则的插件仍可正常使用其他功能</p></blockquote><h2 id="更新卸载插件" tabindex="-1">更新卸载插件 <a class="header-anchor" href="#更新卸载插件" aria-label="Permalink to &quot;更新卸载插件&quot;">​</a></h2><p><strong>在 Whistle 插件管理界面中：</strong></p><ul><li><strong>更新插件：</strong> 点击插件条目右侧的 <code>Update</code> 按钮</li><li><strong>卸载插件：</strong> 点击插件条目右侧的 <code>Uninstall</code> 按钮</li></ul>`,50)]))}const m=a(r,[["render",n]]);export{k as __pageData,m as default};
