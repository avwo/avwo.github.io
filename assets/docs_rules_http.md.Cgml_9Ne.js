import{_ as e,c as a,o,ae as d}from"./chunks/framework.Dgg8-8ov.js";const i=JSON.parse('{"title":"http","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/http.md","filePath":"docs/rules/http.md"}'),s={name:"docs/rules/http.md"};function p(c,t,h,n,l,r){return o(),a("div",null,t[0]||(t[0]=[d(`<h1 id="http" tabindex="-1">http <a class="header-anchor" href="#http" aria-label="Permalink to &quot;http&quot;">​</a></h1><p>将以下三种请求转换为 HTTP 请求（服务端将收到转换后的 HTTP URL）：</p><ol><li><strong>隧道代理：</strong> <code>tunnel://domain:port</code><blockquote><p>示例：<code>tunnel://www.test.com:443</code></p></blockquote></li><li><strong>WebSocket：</strong> <code>ws[s]://domain[:port]/[path/to[?query]]</code><blockquote><p>示例：<code>wss://www.test.com/path?a=1&amp;b=2</code></p></blockquote></li><li><strong>普通 HTTP/HTTPS：</strong> <code>http[s]://domain[:port]/[path/to[?query]]</code><blockquote><p>示例：<code>https://www.test.com/path?a=1&amp;b=2</code></p></blockquote></li></ol><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern http://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>目标 URL 格式：<code>domain[:port]/[path][?query]</code><br>⚠️ 不支持从文件/远程 URL 加载数据</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="http-https-转换" tabindex="-1">HTTP/HTTPS 转换 <a class="header-anchor" href="#http-https-转换" aria-label="Permalink to &quot;HTTP/HTTPS 转换&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>http://www.example.com/path1 http://www.test.com/path/xxx</span></span>
<span class="line"><span>https://www.example.com/path2 http://www.abc.com/path3/yyy</span></span></code></pre></div><ol><li>自动路径拼接：<table tabindex="0"><thead><tr><th>原始请求</th><th>转换结果（服务端收到的 URL）</th></tr></thead><tbody><tr><td><code>http://www.example.com/path1</code></td><td><code>http://www.test.com/path/xxx</code></td></tr><tr><td><code>http://www.example.com/path1/a/b/c?query</code></td><td><code>http://www.test.com/path/xxx/a/b/c?query</code></td></tr><tr><td><code>https://www.example.com/path2</code></td><td><code>http://www.abc.com/path3/yyy</code></td></tr><tr><td><code>https://www.example.com/path2/a/b/c?query</code></td><td><code>http://www.abc.com/path3/yyy/a/b/c?query</code></td></tr></tbody></table></li><li>禁用路径拼接：使用 <code>&lt; &gt;</code> 或 <code>( )</code> 包裹路径<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 http://&lt;www.test.com/path/xxx&gt;</span></span>
<span class="line"><span># www.example.com/path1 http://(www.test.com/path/xxx)</span></span></code></pre></div><table tabindex="0"><thead><tr><th>原始请求</th><th>转换结果（服务端收到的 URL）</th></tr></thead><tbody><tr><td><code>[http/https/wss/ws]://www.example.com/path/x/y/z</code></td><td><code>http://www.test.com/path/xxx</code></td></tr></tbody></table></li></ol><h2 id="websocket-转换" tabindex="-1">WebSocket 转换 <a class="header-anchor" href="#websocket-转换" aria-label="Permalink to &quot;WebSocket 转换&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ws://www.example.com/path1 http://www.test.com/path/xxx</span></span>
<span class="line"><span>wss://www.example.com/path2 http://www.abc.com/path3/yyy</span></span></code></pre></div><p>WebSocket 请求替换成指定的 ws 请求：</p><table tabindex="0"><thead><tr><th>原始请求</th><th>转换结果（服务端收到的 URL）</th></tr></thead><tbody><tr><td><code>ws://www.example.com/path1</code></td><td><code>ws://www.test.com/path/xxx</code></td></tr><tr><td><code>wss://www.example.com/path2/a/b/c?query</code></td><td><code>ws://www.abc.com/path3/yyy/a/b/c?query</code></td></tr></tbody></table><p>同样也支持<strong>自动路径拼接</strong>和<strong>禁用路径拼接</strong>。</p><h2 id="tunnel-转换" tabindex="-1">TUNNEL 转换 <a class="header-anchor" href="#tunnel-转换" aria-label="Permalink to &quot;TUNNEL 转换&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>tunnel://www.example.com:443 http://www.test.com:123</span></span>
<span class="line"><span>tunnel://www.example2.com:443 http://www.test2.com/path</span></span></code></pre></div><table tabindex="0"><thead><tr><th>原始请求</th><th>转换结果（服务端收到的 URL）</th></tr></thead><tbody><tr><td><code>tunnel://www.example.com:443</code></td><td><code>tunnel://www.test.com:123</code></td></tr><tr><td><code>tunnel://www.example2.com:443</code></td><td><code>tunnel://www.test2.com:80</code></td></tr></tbody></table><p>自动忽略匹配 URL 的路径，HTTP 协议默认端口为 <code>80</code>，HTTPS 协议默认端口为 <code>443</code></p>`,18)]))}const b=e(s,[["render",p]]);export{i as __pageData,b as default};
