import{_ as t,c as e,o as s,ae as o}from"./chunks/framework.Dgg8-8ov.js";const x=JSON.parse('{"title":"proxy (http-proxy)","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/proxy.md","filePath":"docs/rules/proxy.md"}'),p={name:"docs/rules/proxy.md"};function n(r,a,l,d,c,i){return s(),e("div",null,a[0]||(a[0]=[o(`<h1 id="proxy-http-proxy" tabindex="-1">proxy (http-proxy) <a class="header-anchor" href="#proxy-http-proxy" aria-label="Permalink to &quot;proxy (http-proxy)&quot;">​</a></h1><p><code>proxy</code>（或 <code>http-proxy</code>）指令用于将匹配的请求通过指定的 HTTP 代理服务器转发。两个指令名称功能完全一致，可互换使用。</p><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern proxy://ipOrDomain[:port] [filters...]</span></span>
<span class="line"><span># 等效写法：</span></span>
<span class="line"><span>pattern http-proxy://ipOrDomain[:port] [filters...]</span></span></code></pre></div><blockquote><p><code>port</code> 可选，不填则使用默认端口 <code>80</code></p></blockquote><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>IP + 可选端口 或域名 + 可选端口<br>⚠️ 不支持从文件/远程 URL 加载数据</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 将请求代理到 HTTP PROXY: \`127.0.0.1:80\`</span></span>
<span class="line"><span>www.example.com/path proxy://127.0.0.1 # 默认端口 80</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 将当前域名的所有请求代理到 HTTP PROXY: \`127.0.0.1:8080\`</span></span>
<span class="line"><span>www.example.com proxy://127.0.0.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 也可以用域名</span></span>
<span class="line"><span>www.example.com/path proxy://test.proxy.com # 默认端口 80</span></span>
<span class="line"><span>www.example.com proxy://test.proxy.com:8080</span></span></code></pre></div><h2 id="高级用法" tabindex="-1">高级用法 <a class="header-anchor" href="#高级用法" aria-label="Permalink to &quot;高级用法&quot;">​</a></h2><p>将请求代理到上游代理后，默认情况下上游代理会根据请求的域名通过 DNS 获取服务器 IP 再继续请求，如果想让上游代理根据指定 IP及端口继续请求，可以这么处理：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 通过查询参数</span></span>
<span class="line"><span>www.example.com proxy://127.0.0.1:8080?host=1.1.1.1</span></span>
<span class="line"><span>www.example.com proxy://127.0.0.1:8080?host=1.1.1.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 通过指令启用</span></span>
<span class="line"><span>www.example.com proxy://127.0.0.1:8080 1.1.1.1 enable://proxyHost</span></span>
<span class="line"><span>www.example.com proxy://127.0.0.1:8080 1.1.1.1:8080 enable://proxyHost</span></span></code></pre></div><blockquote><p><code>1.1.1.1</code> 等价于 <code>host://1.1.1.1</code></p></blockquote><h2 id="与-host-的匹配优先级" tabindex="-1">与 host 的匹配优先级 <a class="header-anchor" href="#与-host-的匹配优先级" aria-label="Permalink to &quot;与 host 的匹配优先级&quot;">​</a></h2><h4 id="默认行为" tabindex="-1">默认行为 <a class="header-anchor" href="#默认行为" aria-label="Permalink to &quot;默认行为&quot;">​</a></h4><p>当请求同时匹配 <code>host</code> 和 <code>proxy</code> 规则时：</p><ul><li>仅 <code>host</code> 规则生效</li><li><code>proxy</code> 规则自动忽略</li></ul><h4 id="修改优先级" tabindex="-1">修改优先级 <a class="header-anchor" href="#修改优先级" aria-label="Permalink to &quot;修改优先级&quot;">​</a></h4><table tabindex="0"><thead><tr><th>配置方式</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><strong>优先 proxy</strong></td><td><a href="./enable.html"><code>enable://proxyFirst</code></a> 或 <a href="./lineProps.html"><code>lineProps://proxyFirst</code></a></td><td>仅 <code>proxy</code> 生效（覆盖 host）</td></tr><tr><td><strong>同时生效</strong></td><td><a href="./enable.html"><code>enable://proxyHost</code></a> 或 <a href="./lineProps.html"><code>lineProps://proxyHost</code></a></td><td><code>proxy</code> 和 <code>host</code> 同时生效</td></tr></tbody></table><h4 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h4><ul><li>大多数场景使用默认行为即可</li><li>需要特殊代理逻辑时才使用 <code>proxyFirst</code></li><li>需要双重匹配时使用 <code>proxyHost</code></li></ul>`,20)]))}const b=t(p,[["render",n]]);export{x as __pageData,b as default};
