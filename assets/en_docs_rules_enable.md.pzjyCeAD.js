import{_ as t,c as a,o as s,ag as n}from"./chunks/framework.Bw-5EFTY.js";const u=JSON.parse('{"title":"enable","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/enable.md","filePath":"en/docs/rules/enable.md"}'),o={name:"en/docs/rules/enable.md"};function i(r,e,c,l,d,p){return s(),a("div",null,e[0]||(e[0]=[n(`<h1 id="enable" tabindex="-1">enable <a class="header-anchor" href="#enable" aria-label="Permalink to &quot;enable&quot;">​</a></h1><p>Enable HTTPS, hide requests, terminate requests, and other features through rules.</p><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern enable://action1|action2|... [filters...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Equivalent to:</span></span>
<span class="line"><span>pattern enable://action1 enable://action2 ... [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>Expression to match request URLs</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>action</td><td>Specific action, see the description below</td><td></td></tr><tr><td>filters</td><td>Optional filters, supporting matching:<br>• Request URL/Method/Headers/Content<br>• Response Status Code/Headers</td><td><a href="./filters.html">Filter Documentation</a></td></tr></tbody></table><ul><li><code>abort</code>: Interrupt the request during the request or response phase (based on the matching phase)</li><li><code>abortReq</code>: Interrupt the request during the request phase</li><li><code>abortRes</code>: Interrupt the request during the response phase</li><li><code>authCapture</code>: Force execution of the <a href="./../extensions/dev.html#auth">auth hook</a> before converting to HTTPS (default behavior is to execute the plugin&#39;s auth hook after converting to an HTTPS request)</li><li><code>auto2http</code>: Enable automatic fallback to HTTP requests when HTTPS requests encounter TLS errors. By default, this is automatically enabled if the serverIP is a local IP</li><li><code>bigData</code>: Increase the data display limit for captured packets (2M → 16M)</li><li><code>br</code>: Enable BR compression for response content</li><li><code>gzip</code>: Enable GZIP compression for response content</li><li><code>deflate</code>: Enable Deflate compression for response content</li><li><code>capture</code> or <code>https</code>: Enable HTTPS (same as the <a href="./../gui/https.html">HTTPS menu function</a>)</li><li><code>captureIp</code>: For requests where the domain is an IP, HTTPS requests are not decrypted by default. Use <code>enable://captureIp</code> to enable HTTPS request parsing</li><li><code>captureStream</code>: Output captured request and response content in stream form to the capture interface in real time, with dynamic appending</li><li><code>clientCert</code>: Enable mutual authentication (mTLS) between the client and server</li><li><code>clientId</code>: Add the request header <code>x-whistle-client-id: Whistle locally generated unique ID</code></li><li><code>clientIp</code>: Set the <code>x-forwarded-for</code> request header for matched non-local requests to forward the client&#39;s real IP address to upstream services</li><li><code>customParser</code>: Customize the display content of the capture interface. For usage, refer to the plugin: <a href="https://github.com/whistle-plugins/whistle.custom-parser" target="_blank" rel="noreferrer">https://github.com/whistle-plugins/whistle.custom-parser</a></li><li><code>flushHeaders</code>: Call <a href="https://nodejs.org/docs/latest/api/http.html#responseflushheaders" target="_blank" rel="noreferrer">response.flushHeaders</a> after <code>response.writeHead(...)</code> (enabled by default)</li><li><code>forHttp</code>: Make the <code>capture</code> function only effective for HTTP requests</li><li><code>forHttps</code>: Make the <code>capture</code> function only effective for HTTPS requests</li><li><code>forceReqWrite</code>: When using <a href="./reqWrite.html">reqWrite</a> or <a href="./reqWriteRaw.html">reqWriteRaw</a> to write request data to a local file, if the corresponding file already exists, the write operation is skipped by default to protect the existing file. Use <code>enable://forceReqWrite</code> to force overwriting</li><li><code>forceResWrite</code>: When using <a href="./resWrite.html">resWrite</a> or <a href="./reqWriteRaw.html">reqWriteRaw</a> to write response data to a local file, if the corresponding file already exists, the write operation is skipped by default to protect the existing file. Use <code>enable://forceResWrite</code> to force overwriting</li><li><code>h2</code>: Enable HTTP2 from Whistle proxy → server</li><li><code>http2</code>: Enable HTTP2 for browser → Whistle proxy → server</li><li><code>httpH2</code>: Enable HTTP2 for HTTP requests from Whistle proxy → server</li><li><code>hide</code>: Hide captured packet data on the interface (excluding <code>captureError</code> and requests sent by Composer)</li><li><code>hideComposer</code>: Hide requests sent by Composer</li><li><code>hideCaptureError</code>: Hide <code>captureError</code> requests</li><li><code>showHost</code>: Set the server IP to the response header <code>x-host-ip</code></li><li><code>ignoreSend</code>: Ignore sending data frames for WebSocket and TUNNEL requests (TUNNEL requests require <code>inspect</code> to be enabled)</li><li><code>ignoreReceive</code>: Ignore receiving data frames for WebSocket and TUNNEL requests (TUNNEL requests require <code>inspect</code> to be enabled)</li><li><code>pauseSend</code>: Pause sending data frames for WebSocket and TUNNEL requests (TUNNEL requests require <code>inspect</code> to be enabled)</li><li><code>pauseReceive</code>: Pause receiving data frames for WebSocket and TUNNEL requests (TUNNEL requests require <code>inspect</code> to be enabled)</li><li><code>inspect</code>: Enable viewing of TUNNEL request content in Inspectors / Frames</li><li><code>interceptConsole</code>: Intercept <code>console.xxx</code> requests and display them in the Log panel of the Whistle management interface (enabled by default)</li><li><code>internalProxy</code>: Use proxy protocols like <code>proxy</code> or <code>socks</code> to forward requests to other proxy servers (e.g., another Whistle instance). After enabling this, HTTPS requests decrypted by the first-layer proxy will be transmitted in plain text within the proxy chain, allowing upstream proxies to directly access plain text data</li><li><code>proxyFirst</code>: Prioritize using <a href="./proxy.html">proxy</a> rules (by default, when both <code>host</code> and <code>proxy</code> match, only <code>host</code> takes effect)</li><li><code>proxyHost</code>: Make both <a href="./proxy.html">proxy</a> and <a href="./host.html">host</a> take effect simultaneously</li><li><code>proxyTunnel</code>: Use with <code>proxyHost</code> to allow the upstream proxy to tunnel through to an upper-layer HTTP proxy. See the example below for details</li><li><code>keepCSP</code>: Automatically remove the <code>csp</code> field from response headers when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>. Use <code>enable://keepCSP</code> to retain these fields</li><li><code>keepAllCSP</code>: Automatically remove the <code>csp</code> field from response headers when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>/<code>weinre</code>/<code>log</code>. Use <code>enable://keepAllCSP</code> to retain these fields</li><li><code>keepCache</code>: Automatically remove cache fields from response headers when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>. Use <code>enable://keepCache</code> to retain the original cache headers</li><li><code>keepAllCache</code>: Automatically remove cache fields from response headers when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>/<code>weinre</code>/<code>log</code>. Use <code>enable://keepAllCache</code> to retain the original cache headers</li><li><code>keepClientId</code>: Retain the original <code>x-whistle-client-id</code> request header (by default, the incoming <code>x-whistle-client-id</code> is deleted)</li><li><code>safeHtml</code>: A security mechanism that checks if the first non-whitespace character of the response content is <code>{</code> or <code>[</code> (indicating a JSON object) before injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code> into an HTML page. If not, the injection proceeds. This prevents accidental injection into non-HTML responses (e.g., JSON interfaces)</li><li><code>strictHtml</code>: A security mechanism that checks if the first non-whitespace character of the response content is <code>&lt;</code> before injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code> into an HTML page. If not, the injection proceeds. This prevents accidental injection into non-HTML responses (e.g., JSON interfaces)</li><li><code>multiClient</code>: When Whistle acts as a public proxy with <code>enable://clientId</code> enabled, a fixed <code>x-whistle-client-id</code> header is added to all requests, preventing upstream services from distinguishing between clients. Enabling <code>enable://multiClient</code> generates and maintains a unique and consistent identifier for each client connection, ensuring upstream services can accurately identify request sources</li><li><code>requestWithMatchedRules</code>: Include the currently matched rules in the request headers</li><li><code>responseWithMatchedRules</code>: Include the currently matched rules in the response headers</li><li><code>tunnelHeadersFirst</code>: Controls the priority of request header merging. Plugins can pass tunnel (TUNNEL) request headers to subsequent stages via <a href="./../extensions/dev.html">tunnelKey</a>. The default merging rule is: if a tunnel header and a parsed regular request header have the same key, the regular request header value is retained. Enabling <code>enable://tunnelHeadersFirst</code> changes this behavior, ensuring tunnel request headers take priority and override any conflicting regular headers</li><li><code>useLocalHost</code>: Modify the domain of <code>log</code> and <code>weinre</code> request URLs to use built-in domains</li><li><code>useSafePort</code>: Modify the port of <code>log</code> and <code>weinre</code> request URLs to use built-in ports</li><li><code>userLogin</code>: Set whether <a href="./statusCode.html">statusCode://401</a> displays a login box (enabled by default)</li><li><code>weakRule</code>: By default, when protocols like <a href="./file.html">file</a> are configured, <a href="./proxy.html">proxy</a> rules automatically become invalid. Setting the <code>weakRule</code> property increases the priority of <a href="./proxy.html">proxy</a> rules, allowing them to remain effective in such scenarios</li><li><code>socket</code>: After enabling HTTPS parsing (<code>Enable HTTPS</code> or <code>enable://https</code>), TUNNEL requests sent to ports <code>80/443</code> are forcibly attempted to be parsed as HTTP/HTTPS traffic. By default, if parsing fails, the connection is destroyed; requests to other ports continue as TUNNEL connections if parsing fails. Setting <code>enable://socket</code> allows requests to ports <code>80/443</code> to degrade to TUNNEL connections if parsing fails, avoiding connection destruction</li><li><code>websocket</code>: Used to handle non-standard WebSocket connections. Some requests use the WebSocket protocol for transmission but have non-standard Upgrade headers (e.g., <code>Upgrade: websocket</code>). By default, Whistle treats them as ordinary TCP connections without parsing the data. Enabling <code>enable://websocket</code> forces Whistle to recognize such connections as WebSocket protocols and parse the data</li></ul><h2 id="configuration-example" tabindex="-1">Configuration Example <a class="header-anchor" href="#configuration-example" aria-label="Permalink to &quot;Configuration Example&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Enable HTTPS</span></span>
<span class="line"><span>www.example.com enale://https</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Abort the request with a 3000ms delay</span></span>
<span class="line"><span>www.example.com/path reqDelay://3000 enable://abortReq</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Abort the response with a 5000ms delay</span></span>
<span class="line"><span>www.example.com/path resDelay://5000 enable://abortRes</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enable GZIP for local replacement content</span></span>
<span class="line"><span>www.example.com/path file:///User/xxx/test enable://gzip</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Set hosts for the upstream proxy (10.10.10.20:8888)</span></span>
<span class="line"><span>www.example.com/path proxy://10.1.1.1:8080 10.10.10.20:8888 enable://proxyHost</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Tunnel requests through the upstream HTTP proxy (10.1.1.1:8080) to the specified HTTP proxy (10.10.10.20:8080)</span></span>
<span class="line"><span>www.example.com proxy://10.1.1.1:8080 10.10.10.20:8080 enable://proxyHost|proxyTunnel</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enable HTTP2 for the entire connection from browser to Whistle proxy to server Functionality</span></span>
<span class="line"><span>www.example.com enable://http2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enable HTTP2 functionality for Whistle proxy -&gt; server</span></span>
<span class="line"><span>www.example.com enable://h2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Force HTTP requests from Whistle proxy -&gt; server to use HTTP2 transport</span></span>
<span class="line"><span>www.example.com enable://httpH2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Safe injection mode: When using the htmlXxx/jsXxx/cssXxx injection directives, inject only if the first character of the response is not \`{\`</span></span>
<span class="line"><span>www.example.com/path enable://safeHtml</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Strict HTML injection mode: When using the htmlXxx/jsXxx/cssXxx injection directives, inject only if the first character of the response is not \`&lt;\`</span></span>
<span class="line"><span>www.example.com/path enable://strictHtml</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Automatically add the x-forwarded-for request header to convey the client&#39;s real IP address</span></span>
<span class="line"><span>www.example.com enable://clientIp</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Expand the packet capture data display limit (2MB → 16MB)</span></span>
<span class="line"><span>www.example.com/path enable://bigData</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Modify the domain name or port of the log/weinre request URL.</span></span>
<span class="line"><span>www.example.com/path enable://useLocalHost | useSafePort</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Force reqWrite/reqWriteRaw/resWrite/resWriteRaw to overwrite existing files.</span></span>
<span class="line"><span>www.example.com/path enable://forceReqWrite | forceResWrite</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Force HTTPS requests to execute the auth hook before parsing (the default is to execute the plugin&#39;s auth hook after converting them to HTTPS).</span></span>
<span class="line"><span>www.example.com enable://authCapture</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Associated Action: [disable](./disable)</span></span></code></pre></div>`,8)]))}const f=t(o,[["render",i]]);export{u as __pageData,f as default};
