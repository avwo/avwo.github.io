import{_ as a,c as p,o as s,ae as e}from"./chunks/framework.Dgg8-8ov.js";const d=JSON.parse('{"title":"xhttps-proxy","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/xhttps-proxy.md","filePath":"docs/rules/xhttps-proxy.md"}'),r={name:"docs/rules/xhttps-proxy.md"};function o(h,t,l,x,i,n){return s(),p("div",null,t[0]||(t[0]=[e('<h1 id="xhttps-proxy" tabindex="-1">xhttps-proxy <a class="header-anchor" href="#xhttps-proxy" aria-label="Permalink to &quot;xhttps-proxy&quot;">​</a></h1><p>xhttps-proxy 是 <a href="./https-proxy.html">https-proxy</a> 规则的穿透版本，主要区别在于跟目标代理建立连接失败时的处理方式：</p><ul><li>✅ 建立连接成功时：与 <a href="./https-proxy.html">https-proxy</a> 规则行为一致</li><li>❌ 建立连接失败时：忽略该匹配规则，继续正常网络请求（而 <a href="./https-proxy.html">https-proxy</a> 中断请求）</li></ul><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern xhttps-proxy://value [filters...]</span></span></code></pre></div><p>详细用法参考：<a href="./https-proxy.html">https-proxy</a></p>',6)]))}const y=a(r,[["render",o]]);export{d as __pageData,y as default};
