import{_ as t,c as a,o as s,ae as r}from"./chunks/framework.Dgg8-8ov.js";const u=JSON.parse('{"title":"resScript","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/resScript.md","filePath":"en/docs/rules/resScript.md"}'),d={name:"en/docs/rules/resScript.md"};function l(n,e,o,i,c,p){return s(),a("div",null,e[0]||(e[0]=[r(`<h1 id="resscript" tabindex="-1">resScript <a class="header-anchor" href="#resscript" aria-label="Permalink to &quot;resScript&quot;">​</a></h1><p>Dynamically generate rules during the response phase using JavaScript to implement complex request processing logic. The script can access request context information and dynamically generate matching rules.</p><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern resScript://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>Expression to match request URLs</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>value</td><td>JS script to generate rules. Supports the following types:<br>• Directory/File Path<br>• Remote URL<br>• Inline/Embedded/Values Content</td><td><a href="./operation.html">Operation Instruction Documentation</a></td></tr><tr><td>filters</td><td>Optional filters. Supports matching:<br>• Request URL/Method/Header/Content<br>• Response Status Code/Header</td><td><a href="./filters.html">Filter Documentation</a></td></tr></tbody></table><h2 id="configuration-example" tabindex="-1">Configuration Example <a class="header-anchor" href="#configuration-example" aria-label="Permalink to &quot;Configuration Example&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`\`\` test.js</span></span>
<span class="line"><span>if (method === &#39;GET&#39;) {</span></span>
<span class="line"><span>    rules.push(&#39;* resType://text&#39;);</span></span>
<span class="line"><span>    rules.push(&#39;* file://(&lt;div&gt;GET-Request&lt;/div&gt;)&#39;);</span></span>
<span class="line"><span>} else {</span></span>
<span class="line"><span>    rules.push(&#39;* resStatus://403&#39;);</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path resScript://{test.js}</span></span></code></pre></div><p>Accessing <code>https://www.example.com/path/to</code> does not execute <code>* file://(&lt;div&gt;hello&lt;div&gt;)</code> (because the rules generated by resScript are executed during the response phase).</p><h4 id="available-global-variables" tabindex="-1">Available Global Variables <a class="header-anchor" href="#available-global-variables" aria-label="Permalink to &quot;Available Global Variables&quot;">​</a></h4><table tabindex="0"><thead><tr><th>Variable/Method</th><th>Description</th></tr></thead><tbody><tr><td><code>url</code></td><td>Full request URL</td></tr><tr><td><code>method</code></td><td>Request method (GET/POST, etc.)</td></tr><tr><td><code>ip</code>/<code>clientIp</code></td><td>Client IP address</td></tr><tr><td><code>headers</code></td><td>Request header object</td></tr><tr><td><code>body</code></td><td>Request body (max 16KB)</td></tr><tr><td><code>rules</code></td><td>Rule array, add new rules via push</td></tr><tr><td><code>values</code></td><td>Temporary value storage object</td></tr><tr><td><code>render(tpl,data)</code></td><td>Micro template rendering function</td></tr><tr><td><code>getValue(key)</code></td><td>Get the value in <code>Values</code></td></tr><tr><td><code>parseUrl</code></td><td>Same as <code>url.parse</code> in Node.js</td></tr><tr><td><code>parseQuery</code></td><td>Same as <code>querystring.parse</code> in Node.js</td></tr></tbody></table><h2 id="related-protocols" tabindex="-1">Related Protocols <a class="header-anchor" href="#related-protocols" aria-label="Permalink to &quot;Related Protocols&quot;">​</a></h2><ol><li>Request-phase script rule: <a href="./reqScript.html">reqScript</a></li><li>Request-phase batch rules: <a href="./resScript.html">resRules</a></li><li>Response-phase batch rules: <a href="./resRules.html">resRules</a></li><li>More complex customization requirements: <a href="./../extensions/dev.html">Plugin development</a></li></ol>`,12)]))}const m=t(d,[["render",l]]);export{u as __pageData,m as default};
