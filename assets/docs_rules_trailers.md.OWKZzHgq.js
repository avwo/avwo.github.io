import{_ as t,c as e,o as s,ag as n}from"./chunks/framework.Bw-5EFTY.js";const x=JSON.parse('{"title":"trailers","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/trailers.md","filePath":"docs/rules/trailers.md"}'),l={name:"docs/rules/trailers.md"};function r(p,a,i,o,d,h){return s(),e("div",null,a[0]||(a[0]=[n(`<h1 id="trailers" tabindex="-1">trailers <a class="header-anchor" href="#trailers" aria-label="Permalink to &quot;trailers&quot;">​</a></h1><p>修改或新增使用 <code>Transfer-Encoding: chunked</code> 分块传输编码的响应尾部信息（<code>Trailers</code>）。Trailers 是在分块传输的响应主体之后发送的额外 HTTP 头部字段。</p><blockquote><p>HTTP Tailers 功能：<a href="https://http.dev/trailer" target="_blank" rel="noreferrer">https://http.dev/trailer</a></p></blockquote><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern trailers://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>操作数据对象，支持从以下渠道获取：<br>• 目录/文件路径<br>• 远程 URL<br>• 内联/内嵌/Values内容</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><h4 id="基础配置" tabindex="-1">基础配置 <a class="header-anchor" href="#基础配置" aria-label="Permalink to &quot;基础配置&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 设置请求头 \`x-proxy: Whistle\`</span></span>
<span class="line"><span>www.example.com/path trailers://x-proxy=Whistle</span></span></code></pre></div><h4 id="设置多个请求头" tabindex="-1">设置多个请求头 <a class="header-anchor" href="#设置多个请求头" aria-label="Permalink to &quot;设置多个请求头&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`\`\` test.json</span></span>
<span class="line"><span>x-test1: 1</span></span>
<span class="line"><span>x-test2:</span></span>
<span class="line"><span>x-test3: abc</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path2 trailers://{test.json}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 等价于：www.example.com/path2 trailers://x-test1=1&amp;x-test2=&amp;x-test3=abc</span></span></code></pre></div><h4 id="本地-远程资源" tabindex="-1">本地/远程资源 <a class="header-anchor" href="#本地-远程资源" aria-label="Permalink to &quot;本地/远程资源&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 trailers:///User/xxx/test.json</span></span>
<span class="line"><span>www.example.com/path2 trailers://https://www.xxx.com/xxx/params.json</span></span>
<span class="line"><span># 通过编辑临时文件</span></span>
<span class="line"><span>www.example.com/path3 trailers://temp/blank.json</span></span></code></pre></div><h2 id="关联协议" tabindex="-1">关联协议 <a class="header-anchor" href="#关联协议" aria-label="Permalink to &quot;关联协议&quot;">​</a></h2><ol><li>删除请求头字段：<a href="./delete.html">delete://trailers.xxx</a></li></ol>`,15)]))}const b=t(l,[["render",r]]);export{x as __pageData,b as default};
