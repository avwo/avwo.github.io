import{_ as s,c as a,o as n,ae as t}from"./chunks/framework.Dgg8-8ov.js";const u=JSON.parse('{"title":"enable","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/enable.md","filePath":"en/docs/rules/enable.md"}'),o={name:"en/docs/rules/enable.md"};function i(l,e,c,p,r,d){return n(),a("div",null,e[0]||(e[0]=[t(`<h1 id="enable" tabindex="-1">enable <a class="header-anchor" href="#enable" aria-label="Permalink to &quot;enable&quot;">​</a></h1><p>Enable HTTPS, hide requests, terminate requests, and other features through rules.</p><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern enable://action1|action2|... [filters...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Equivalent to:</span></span>
<span class="line"><span>pattern enable://action1 enable://action2 ... [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>Expression to match request URLs</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>action</td><td>Specific action, see the description below</td><td></td></tr><tr><td>filters</td><td>Optional filters, supporting matching:<br>• Request URL/Method/Headers/Content<br>• Response Status Code/Headers</td><td><a href="./filters.html">Filter Documentation</a></td></tr></tbody></table><ul><li><code>capture</code> or <code>https</code>: Enable HTTPS (same as the <a href="./../gui/https.html">HTTPS menu function</a>)</li><li><code>authCapture</code>: Force execution of the [auth] before converting to HTTPS hook](../extensions/dev#auth) (By default, the plugin&#39;s auth hook is executed after converting the request to HTTPS)</li><li><code>abort</code>: Aborts the request at the request or response stage (depending on the matching stage)</li><li><code>abortReq</code>: Aborts the request at the request stage</li><li><code>abortRes</code>: Aborts the response at the response stage</li><li><code>br</code>: Enables BR compression of the response content</li><li><code>gzip</code>: Enables GZIP compression of the response content</li><li><code>deflate</code>: Enables Deflate compression of the response content</li><li><code>proxyHost</code>: Both <a href="./proxy.html">proxy</a> and <a href="./host.html">host</a> take effect simultaneously</li><li><code>proxyTunnel</code>: Used with <code>proxyHost</code>, it allows the upstream proxy to tunnel to the upstream HTTP proxy. See the example below for details.</li><li><code>proxyFirst</code>: Prioritizes the <a href="./proxy.html">proxy</a> rule</li><li><code>http2</code>: Enables HTTP2 for all browsers, Whistle proxy, and servers</li><li><code>h2</code>: Whistle Proxy -&gt; Enable HTTP2 for the server</li><li><code>httpH2</code>: Whistle Proxy -&gt; Enable HTTP2 for HTTP requests to the server</li><li><code>safeHtml</code>: This is a security feature. When injecting content into an HTML page using <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>, the response is first checked to see if the first non-whitespace character is <code>{</code> or <code>[</code> (the opening characters of a JSON object). Injection is performed only if these characters are not. This effectively prevents accidental injection into non-standard HTML responses (such as JSON endpoints).</li><li><code>strictHtml</code>: This is a security feature. When injecting content into an HTML page using <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>, the response is first checked to see if the first non-whitespace character is <code>&lt;</code>. Injection is performed only if these characters are not. This effectively prevents accidental injection into non-standard HTML responses (such as JSON interfaces).</li><li><code>clientIp</code>: Sets the x-forwarded-for request header for matching non-local requests, transparently transmitting the client&#39;s real IP address to the upstream service.</li><li><code>bigData</code>: Increases the packet capture data display limit (2MB → 16MB).</li><li><code>forceReqWrite</code>: When writing request data to a local file using <code>reqWrite</code> (./reqWrite) or <code>reqWriteRaw</code> (./reqWriteRaw), if the corresponding file already exists, the write operation will be skipped by default to protect the existing file. You can force an overwrite with <code>enable://forceReqWrite</code>.</li><li><code>forceResWrite</code>: When writing response data to a local file using <code>resWrite</code> (./resWrite) or <code>reqWriteRaw</code> (./reqWriteRaw), if the corresponding file already exists, the write operation will be skipped by default to protect the existing file. You can force an overwrite with <code>enable://forceResWrite</code>.</li><li><code>auto2http</code>: Enables HTTPS request reporting. Automatically convert TLS errors to HTTP requests. This feature is enabled by default if the server IP is a local IP address.</li><li><code>customParser</code>: Customizes the packet capture interface display. For usage, refer to the plugin: <a href="https://github.com/whistle-plugins/whistle.custom-parser" target="_blank" rel="noreferrer">https://github.com/whistle-plugins/whistle.custom-parser</a></li><li><code>hide</code>: Hides the packet capture data on the interface.</li><li><code>inspect</code>: Enables viewing of Tunnel request content in the Inspectors/Frames.</li><li><code>keepCSP</code>: Automatically removes the <code>csp</code> response header field when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>. To retain this field, use <code>enable://keepCSP</code>.</li><li><code>keepAllCSP</code>: Automatically removes the <code>csp</code> response header field when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>/<code>weinre</code>/<code>log</code>. To retain this field, use <code>enable://keepCSP</code>.</li><li><code>keepCache</code>: Automatically removes the <code>csp</code> response header field when injecting content via <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>/<code>weinre</code>/<code>log</code>. <code>htmlXxx</code>/<code>jsXxx</code>/<code>cssXxx</code>/<code>weinre</code>/<code>log</code> automatically removes cached response headers when injecting content. If you want to retain custom cache headers, use <code>enable://keepCache</code>.</li><li><code>useLocalHost</code>: Modifies the domain name of <code>log</code> and <code>weinre</code> request URLs to the built-in domain name.</li><li><code>useSafePort</code>: Modifies the port number of <code>log</code> and <code>weinre</code> request URLs to the built-in port.</li><li><code>userLogin</code>: Sets whether to display the login dialog box for <a href="./statusCode.html">statusCode://401</a> (displayed by default).</li></ul><h2 id="configuration-example" tabindex="-1">Configuration Example <a class="header-anchor" href="#configuration-example" aria-label="Permalink to &quot;Configuration Example&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Enable HTTPS</span></span>
<span class="line"><span>www.example.com enale://https</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Abort the request with a 3000ms delay</span></span>
<span class="line"><span>www.example.com/path reqDelay://3000 enable://abortReq</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Abort the response with a 5000ms delay</span></span>
<span class="line"><span>www.example.com/path resDelay://5000 enable://abortRes</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enable GZIP for local replacement content</span></span>
<span class="line"><span>www.example.com/path file:///User/xxx/test enable://gzip</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Set hosts for the upstream proxy (10.10.10.20:8888)</span></span>
<span class="line"><span>www.example.com/path proxy://10.1.1.1:8080 10.10.10.20:8888 enable://proxyHost</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Tunnel requests through the upstream HTTP proxy (10.1.1.1:8080) to the specified HTTP proxy (10.10.10.20:8080)</span></span>
<span class="line"><span>www.example.com proxy://10.1.1.1:8080 10.10.10.20:8080 enable://proxyHost|proxyTunnel</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enable HTTP2 for the entire connection from browser to Whistle proxy to server Functionality</span></span>
<span class="line"><span>www.example.com enable://http2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enable HTTP2 functionality for Whistle proxy -&gt; server</span></span>
<span class="line"><span>www.example.com enable://h2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Force HTTP requests from Whistle proxy -&gt; server to use HTTP2 transport</span></span>
<span class="line"><span>www.example.com enable://httpH2</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Safe injection mode: When using the htmlXxx/jsXxx/cssXxx injection directives, inject only if the first character of the response is not \`{\`</span></span>
<span class="line"><span>www.example.com/path enable://safeHtml</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Strict HTML injection mode: When using the htmlXxx/jsXxx/cssXxx injection directives, inject only if the first character of the response is not \`&lt;\`</span></span>
<span class="line"><span>www.example.com/path enable://strictHtml</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Automatically add the x-forwarded-for request header to convey the client&#39;s real IP address</span></span>
<span class="line"><span>www.example.com enable://clientIp</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Expand the packet capture data display limit (2MB → 16MB)</span></span>
<span class="line"><span>www.example.com/path enable://bigData</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Modify the domain name or port of the log/weinre request URL.</span></span>
<span class="line"><span>www.example.com/path enable://useLocalHost | useSafePort</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Force reqWrite/reqWriteRaw/resWrite/resWriteRaw to overwrite existing files.</span></span>
<span class="line"><span>www.example.com/path enable://forceReqWrite | forceResWrite</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Force HTTPS requests to execute the auth hook before parsing (the default is to execute the plugin&#39;s auth hook after converting them to HTTPS).</span></span>
<span class="line"><span>www.example.com enable://authCapture</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Associated Action: [disable](./disable)</span></span></code></pre></div>`,8)]))}const f=s(o,[["render",i]]);export{u as __pageData,f as default};
