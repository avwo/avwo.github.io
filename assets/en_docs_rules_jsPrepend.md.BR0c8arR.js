import{_ as t,c as s,o as a,ae as n}from"./chunks/framework.Dgg8-8ov.js";const m=JSON.parse('{"title":"jsPrepend","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/jsPrepend.md","filePath":"en/docs/rules/jsPrepend.md"}'),i={name:"en/docs/rules/jsPrepend.md"};function o(l,e,p,d,r,h){return a(),s("div",null,e[0]||(e[0]=[n(`<h1 id="jsprepend" tabindex="-1">jsPrepend <a class="header-anchor" href="#jsprepend" aria-label="Permalink to &quot;jsPrepend&quot;">​</a></h1><p>Inserts the specified content before the existing response body. (This only works for responses with <code>content-type</code> containing <code>javascript</code> and a status code containing a body (e.g., <code>200</code>/<code>500</code>).)</p><blockquote><p>⚠️ Note: Requests without a body, such as 204 and 304 responses, are not affected.</p></blockquote><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern jsPrepend://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>An expression to match against the request URL</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>value</td><td>Text or binary content. Supports the following types:<br>• Directory/File Path<br>• Remote URL<br>• Inline/Embedded/Values Content</td><td><a href="./operation.html">Operation Instruction Documentation</a></td></tr><tr><td>filters</td><td>Optional filters. Supports matching:<br>• Request URL/Method/Headers/Content<br>• Response Status Code/Headers</td><td><a href="./filters.html">Filter Documentation</a></td></tr></tbody></table><h2 id="configuration-example" tabindex="-1">Configuration Example <a class="header-anchor" href="#configuration-example" aria-label="Permalink to &quot;Configuration Example&quot;">​</a></h2><h4 id="inline-method" tabindex="-1">Inline Method <a class="header-anchor" href="#inline-method" aria-label="Permalink to &quot;Inline Method&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 jsPrepend://(Hello) file://(-test-)</span></span>
<span class="line"><span>www.example.com/path2 jsPrepend://(Hello) file://(-test-) resType://js</span></span>
<span class="line"><span>www.example.com/path3 jsPrepend://(Hello) file://(-test-) resType://css</span></span></code></pre></div><ul><li>Request <code>https://www.example.com/path1/to</code>. The response content becomes<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;-test-</span></span></code></pre></div></li><li>Request <code>https://www.example.com/path2/to</code>. The response content becomes <code>Hello-test-</code></li><li>Request The response content of <code>https://www.example.com/path3/to</code> becomes <code>-test-</code></li></ul><h4 id="embedded-values-method" tabindex="-1">Embedded/Values Method <a class="header-anchor" href="#embedded-values-method" aria-label="Permalink to &quot;Embedded/Values Method&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`\`\` body.txt</span></span>
<span class="line"><span>Hello world.</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path1 jsPrepend://{body.txt} file://(-test-)</span></span>
<span class="line"><span>www.example.com/path2 jsPrepend://{body.txt} file://(-test-) resType://js</span></span>
<span class="line"><span>www.example.com/path3 jsPrepend://{body.txt} file://(-test-) resType://css</span></span></code></pre></div><ul><li>Requesting <code>https://www.example.com/path1/to</code>, the response content becomes<div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;Hello world.&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; -test-</span></span></code></pre></div></li><li>Requesting <code>https://www.example.com/path2/to</code>, the response content becomes <code>Hello world.-test-</code></li><li>Request <code>https://www.example.com/path3/to</code>. The response content becomes <code>-test-</code>.</li></ul><h4 id="local-remote-resources" tabindex="-1">Local/Remote Resources <a class="header-anchor" href="#local-remote-resources" aria-label="Permalink to &quot;Local/Remote Resources&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 jsPrepend:///User/xxx/test.js</span></span>
<span class="line"><span>www.example.com/path2 jsPrepend://https://www.xxx.com/xxx/params.js</span></span>
<span class="line"><span># Editing a temporary file</span></span>
<span class="line"><span>www.example.com/path3 jsPrepend://temp/blank.js</span></span></code></pre></div><h2 id="associated-protocols" tabindex="-1">Associated Protocols <a class="header-anchor" href="#associated-protocols" aria-label="Permalink to &quot;Associated Protocols&quot;">​</a></h2><ol><li>Inject content before the response content: <a href="./reqPrepend.html">reqPrepend</a></li><li>Replace JavaScript response content: <a href="./jsBody.html">jsBody</a></li><li>Inject content after JavaScript response content: <a href="./jsPrepend.html">jsPrepend</a></li></ol>`,17)]))}const u=t(i,[["render",o]]);export{m as __pageData,u as default};
