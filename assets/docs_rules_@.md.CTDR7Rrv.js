import{_ as e,c as a,o as t,ae as n}from"./chunks/framework.Dgg8-8ov.js";const u=JSON.parse('{"title":"@ 符号用法","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/@.md","filePath":"docs/rules/@.md"}'),p={name:"docs/rules/@.md"};function l(c,s,o,i,r,d){return t(),a("div",null,s[0]||(s[0]=[n(`<h1 id="符号用法" tabindex="-1"><code>@</code> 符号用法 <a class="header-anchor" href="#符号用法" aria-label="Permalink to &quot;\`@\` 符号用法&quot;">​</a></h1><p>当您希望将规则存放在远程服务器或本地项目文件中，并让 Whistle 自动同步更新时；或当服务端要求双向认证（mTLS）时，可以利用规则里面的 <code>@</code> 符号实现。</p><h2 id="引入规则文件-path" tabindex="-1">引入规则文件 (<code>@path</code>) <a class="header-anchor" href="#引入规则文件-path" aria-label="Permalink to &quot;引入规则文件 (\`@path\`)&quot;">​</a></h2><p><strong>功能：</strong> 动态加载外部规则文件内容（支持自动刷新）</p><p><strong>使用格式：</strong> <code>@文件路径或URL</code></p><p><strong>支持类型：</strong></p><ul><li>远程 URL：<code>@https://example.com/rules.txt</code></li><li>本地文件：<code>@~/projects/rules.txt</code>（支持所有操作系统路径）</li><li>插件接口：<code>@whistle.nohost/api/rules</code>（需插件实现接口） <blockquote><p>Windows 路径可混用 / 和 \\：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@C:/whistle/rules.txt</span></span>
<span class="line"><span>@D:\\config\\proxy.rules</span></span></code></pre></div></blockquote></li></ul><h2 id="配置客户端证书-clientcert" tabindex="-1">配置客户端证书 (<code>@clientCert://</code>) <a class="header-anchor" href="#配置客户端证书-clientcert" aria-label="Permalink to &quot;配置客户端证书 (\`@clientCert://\`)&quot;">​</a></h2><p><strong>功能：</strong> 为双向认证(mTLS)请求指定客户端证书</p><blockquote><p>推荐改用 <a href="./cipher.html">tlsOptions</a> 配置项</p></blockquote><p><strong>使用格式：</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@clientCert://key=私钥路径&amp;cert=cert或pem证书路径</span></span>
<span class="line"><span>或</span></span>
<span class="line"><span>@clientCert://pwd=passphrase&amp;cert=pfx或p12证书路径</span></span></code></pre></div><p><strong>支持类型：</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># cert 格式证书</span></span>
<span class="line"><span>pattern @clientCert://key=/User/xxx/test.key&amp;cert=/User/xxx/test.crt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pem 格式证书</span></span>
<span class="line"><span>pattern @clientCert://key=E:\\test.pem&amp;cert=E:\\test.pem</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pfx 格式证书</span></span>
<span class="line"><span>pattern @clientCert://pwd=passphrase&amp;pfx=/User/xxx/test.pfx</span></span>
<span class="line"><span></span></span>
<span class="line"><span># p12 格式证书</span></span>
<span class="line"><span>pattern @clientCert://pwd=passphrase&amp;pfx=E:/test.p12</span></span></code></pre></div><blockquote><p>Windows 路径可混用 <code>/</code> 和 <code>\\</code></p></blockquote>`,15)]))}const x=e(p,[["render",l]]);export{u as __pageData,x as default};
