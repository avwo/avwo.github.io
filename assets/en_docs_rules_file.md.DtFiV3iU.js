import{_ as a,c as t,o as s,ag as n}from"./chunks/framework.Bw-5EFTY.js";const u=JSON.parse('{"title":"file","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/file.md","filePath":"en/docs/rules/file.md"}'),l={name:"en/docs/rules/file.md"};function i(o,e,p,c,r,d){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="file" tabindex="-1">file <a class="header-anchor" href="#file" aria-label="Permalink to &quot;file&quot;">​</a></h1><p>Use a local file to respond to requests. Suitable for:</p><ul><li>Setting up a local development environment</li><li>Debugging local front-end pages</li><li>Interface mock scenarios</li></ul><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern file://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>Expression to match the request URL</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>value</td><td>Operation content. Supports the following types:<br>• Directory/File Path<br>• Remote URL<br>• Inline/Embedded/Values Content</td><td><a href="./operation.html">Operation Instruction Documentation</a></td></tr><tr><td>filters</td><td>Optional filters. Supports matching:<br>• Request URL/Method/Header/Content<br>• Response Status Code/Header</td><td><a href="./filters.html">Filter Documentation</a></td></tr></tbody></table><h2 id="replace-a-local-file" tabindex="-1">Replace a Local File <a class="header-anchor" href="#replace-a-local-file" aria-label="Permalink to &quot;Replace a Local File&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Basic Usage</span></span>
<span class="line"><span>www.example.com/path file:///User/xxx/test</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Windows path</span></span>
<span class="line"><span>www.example.com/path file://D:\\test</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Exclude specific interfaces</span></span>
<span class="line"><span>www.example.com/path file:///User/xxx/test excludeFilter://*/path/cgi</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Match based on request content</span></span>
<span class="line"><span>www.example.com/path file:///User/xxx/test includeFilter://b:/&quot;cmdname&quot;:\\s*&quot;test&quot;/i</span></span></code></pre></div><p><strong>Feature Description:</strong></p><ul><li>Automatic path concatenation: Accessing <code>https://www.example.com/path/x/y/z</code> will map to <code>/User/xxx/test/x/y/z</code></li><li>Disable path concatenation: Use <code>&lt; &gt;</code> to wrap the path<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path file://&lt;/User/xxx/test&gt;</span></span></code></pre></div><blockquote><p>Accessing <code>https://www.example.com/path/x/y/z</code> will only automatically load the file corresponding to <code>/User/xxx/test</code></p></blockquote></li></ul><h2 id="quick-replacement" tabindex="-1">Quick Replacement <a class="header-anchor" href="#quick-replacement" aria-label="Permalink to &quot;Quick Replacement&quot;">​</a></h2><p>If working with local files is inconvenient, you can also use Whistle&#39;s Inline/Embedded/Values functionality to set the response content through the interface:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Inline values cannot contain spaces</span></span>
<span class="line"><span>www.example.com/path file://({&quot;ec&quot;:0})</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Embedded values (spaces and line breaks are allowed)</span></span>
<span class="line"><span>\`\`\` test.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;ec&quot;: 2,</span></span>
<span class="line"><span>  &quot;em&quot;: &quot;error&quot;</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path file://{test.json}</span></span></code></pre></div><blockquote><p><code>test.json</code> If the content is large, place it in Values.</p></blockquote><h2 id="replacing-a-temporary-file" tabindex="-1">Replacing a Temporary File <a class="header-anchor" href="#replacing-a-temporary-file" aria-label="Permalink to &quot;Replacing a Temporary File&quot;">​</a></h2><p>If the content is large and working with local files is inconvenient, you can use Whistle&#39;s temporary file functionality:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path file://temp/blank.html</span></span></code></pre></div><p><strong>Steps:</strong></p><ol><li>Hold down <code>Command (Mac)</code>/<code>Ctrl (Win)</code></li><li>Click in the rule <code>file://temp/blank.html</code></li><li>Enter the response content in the pop-up editor.</li></ol><h2 id="mock-jsonp" tabindex="-1">Mock JSONP <a class="header-anchor" href="#mock-jsonp" aria-label="Permalink to &quot;Mock JSONP&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path file://\`(\${query.callback}({&quot;ec&quot;:0}))\` # Inline values cannot contain spaces</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Inline values (spaces and newlines are allowed)</span></span>
<span class="line"><span>\`\`\` test.json</span></span>
<span class="line"><span>\${query.callback}({</span></span>
<span class="line"><span>&quot;ec&quot;: 2,</span></span>
<span class="line"><span>&quot;em&quot;: &quot;error&quot;</span></span>
<span class="line"><span>})</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path file://\`{test.json}\`</span></span></code></pre></div><p>Template strings do not work directly in the following scenarios:</p><ul><li>When referencing a local file path</li><li>When referencing a remote URL</li></ul><p>When encountering the above limitations, you can use the <a href="./tpl.html">tpl</a> function as an alternative.</p><h2 id="advanced-usage" tabindex="-1">Advanced Usage <a class="header-anchor" href="#advanced-usage" aria-label="Permalink to &quot;Advanced Usage&quot;">​</a></h2><p><strong>Multi-Directory Search:</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path file:///path1|/path2|/path3</span></span></code></pre></div><p><strong>Search Logic:</strong></p><ol><li>Check in order: /path1/x/y/z → /path2/x/y/z → /path3/x/y/z</li><li>Return immediately if the first existing file is found</li><li>Return <code>404</code> if all files are not found</li></ol><h2 id="associated-protocols" tabindex="-1">Associated Protocols <a class="header-anchor" href="#associated-protocols" aria-label="Permalink to &quot;Associated Protocols&quot;">​</a></h2><ol><li>To allow requests for unmatched files to continue normally, use: <a href="./xfile.html">xfile</a></li><li>To replace the remote URL with another one, use: <a href="./https.html">https</a> or <a href="./http.html">http</a> or <a href="./host.html">host</a> (<del><code>file://https://xxx</code></del> is not recommended)</li></ol>`,31)]))}const m=a(l,[["render",i]]);export{u as __pageData,m as default};
