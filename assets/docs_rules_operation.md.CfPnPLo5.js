import{_ as a}from"./chunks/values-demo1.CKp8x0mH.js";import{_ as e,c as n,o as t,ag as p}from"./chunks/framework.Bw-5EFTY.js";const g=JSON.parse('{"title":"operation","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/operation.md","filePath":"docs/rules/operation.md"}'),l={name:"docs/rules/operation.md"};function i(o,s,d,r,c,h){return t(),n("div",null,s[0]||(s[0]=[p('<h1 id="operation" tabindex="-1">operation <a class="header-anchor" href="#operation" aria-label="Permalink to &quot;operation&quot;">​</a></h1><p>在 Whistle 中，每条规则由 匹配模式（<code>pattern</code>） 和 操作（<code>operation</code>） 两部分组成，其中 <code>operation</code> 的通用语法为：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>protocol://[value]</span></span></code></pre></div><ul><li><strong>protocol</strong>：指定操作类型（如 <code>file</code>、<code>proxy</code>、<code>resReplace</code> 等）</li><li><strong>value</strong>：操作内容（支持多种格式，见下文）</li></ul><h2 id="内联值" tabindex="-1">内联值 <a class="header-anchor" href="#内联值" aria-label="Permalink to &quot;内联值&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern reqHeaders://x-proxy=Whistle   # 设置请求头</span></span>\n<span class="line"><span>pattern statusCode://404               # 修改状态码</span></span>\n<span class="line"><span>pattern file://({&quot;ec&quot;:0})              # 用内联内容（小括号里面的值：`{&quot;ec&quot;:0}`）响应请求</span></span></code></pre></div><p>当操作内容（Value）包含空格、换行符或特殊字符时，无法直接使用内联方式（Inline），需改用以下方法：</p><h2 id="内嵌值" tabindex="-1">内嵌值 <a class="header-anchor" href="#内嵌值" aria-label="Permalink to &quot;内嵌值&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` ua.txt</span></span>\n<span class="line"><span>Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>pattern ua://{ua.txt}</span></span></code></pre></div><p>等价于</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` headers.json</span></span>\n<span class="line"><span>user-agent: Mozilla/5.0 (iPhone; CPU iPhone OS 16_6 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Mobile/15E148 Safari/604.1</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>pattern reqHeaders://{headers.json}</span></span></code></pre></div><h2 id="values-引用" tabindex="-1">Values 引用 <a class="header-anchor" href="#values-引用" aria-label="Permalink to &quot;Values 引用&quot;">​</a></h2><p>当操作值（Value）需要被多个规则共享时，直接内嵌在规则中会导致无法复用。此时可以将这些值存储在 Whistle 界面的 Values 模块中，并通过键名引用：</p><ol><li>在 Values 里面创建一个名为 <code>result.json</code> 的 key 后，填入操作内容</li><li>在规则里面即可通过 <code>{result.json}</code> 的方式引用，如：<code>www.test.com/cgi-bin/test file://{result.json}</code></li></ol><img src="'+a+'" width="420"><h2 id="文件-远程资源" tabindex="-1">文件/远程资源 <a class="header-anchor" href="#文件-远程资源" aria-label="Permalink to &quot;文件/远程资源&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern reqHeaders:///User/xxx/filepath             # 从本地文件加载操作内容</span></span>\n<span class="line"><span>pattern resHeadrs://https://example.com/config.json # 从远处加载 JSON 对象</span></span>\n<span class="line"><span>pattern resHeaders://temp/blank.json                # 通过边境临时文件</span></span></code></pre></div><blockquote><p>⚠️ 注意：http/https/ws/wss/tunnel/host/enable/cache... 等协议禁止通过文件路径或远程 URL 获取内容，详见各协议文档。</p></blockquote><h2 id="小括号用途" tabindex="-1">小括号用途 <a class="header-anchor" href="#小括号用途" aria-label="Permalink to &quot;小括号用途&quot;">​</a></h2><p>在 Whistle 规则中，protocol://value 的 value 部分可能有三种间接引用类型：</p><ol><li><code>{key}</code> - 引用内嵌值</li><li><code>remote-url</code> - 远程资源地址</li><li><code>localfilepath</code> - 本地文件路径</li></ol><p>当需要直接引用上述内容本身（而非它们间接引用内容）作为操作内容时，可以用小括号包裹：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>protocol://(value)</span></span></code></pre></div><p>示例：</p><ol><li><code>reqHeaders:///User/xxx/yyy.txt</code> - 从本地文件 <code>/User/xxx/yyy.txt</code> 加载操作内容</li><li><code>reqHeaders://(/User/xxx/yyy.txt)</code> - 将 <code>/User/xxx/yyy.txt</code> 直接作为操作内容</li></ol><h2 id="模板字符串" tabindex="-1">模板字符串 <a class="header-anchor" href="#模板字符串" aria-label="Permalink to &quot;模板字符串&quot;">​</a></h2><p>Whistle 提供了类似 ES6 的模板字符串功能，允许您动态引用请求信息并应用到规则配置中。支持以下几种模板字符串：</p><h5 id="一般内敛值" tabindex="-1">一般内敛值 <a class="header-anchor" href="#一般内敛值" aria-label="Permalink to &quot;一般内敛值&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern protocol://`...${version}...`</span></span></code></pre></div><h5 id="内嵌值或-values-引用" tabindex="-1">内嵌值或 Values 引用 <a class="header-anchor" href="#内嵌值或-values-引用" aria-label="Permalink to &quot;内嵌值或 Values 引用&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>\n<span class="line"><span>``` test.key</span></span>\n<span class="line"><span>...${reqId}...</span></span>\n<span class="line"><span>...${version}...</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>pattern protocol://`{test.key}`</span></span></code></pre></div><h5 id="小括号内容" tabindex="-1">小括号内容 <a class="header-anchor" href="#小括号内容" aria-label="Permalink to &quot;小括号内容&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern protocol://`(...${now}...)`</span></span></code></pre></div><h5 id="字符串变量" tabindex="-1">字符串变量 <a class="header-anchor" href="#字符串变量" aria-label="Permalink to &quot;字符串变量&quot;">​</a></h5><table tabindex="0"><thead><tr><th>变量名称</th><th>取值</th></tr></thead><tbody><tr><td><code>${now}</code></td><td>Date.now()</td></tr><tr><td><code>${random}</code></td><td>Math.random()</td></tr><tr><td><code>${randomUUID}</code></td><td>crypto.randomUUID ? crypto.randomUUID()</td></tr><tr><td><code>${reqId}</code></td><td>Whistle 给每个请求分配的 ID</td></tr><tr><td><code>${url.protocol}</code></td><td>url.parse(fullUrl).protocol</td></tr><tr><td><code>${url.hostname}</code></td><td>url.parse(fullUrl).hostname</td></tr><tr><td><code>${url.host}</code></td><td>url.parse(fullUrl).host</td></tr><tr><td><code>${url.port}</code></td><td>url.parse(fullUrl).port</td></tr><tr><td><code>${url.path}</code></td><td>url.parse(fullUrl).path</td></tr><tr><td><code>${url.pathname}</code></td><td>url.parse(fullUrl).pathname</td></tr><tr><td><code>${url.search}</code></td><td>url.parse(fullUrl).search</td></tr><tr><td><code>${query.xxx}</code></td><td>请求参数 <code>xxx</code> 的值</td></tr><tr><td><code>${url}</code></td><td>请求完整 URL</td></tr><tr><td><code>${querystring}</code></td><td>url.parse(fullUrl).search || &#39;?&#39;（不为空）</td></tr><tr><td><code>${searchstring}</code></td><td>url.parse(fullUrl).search || &#39;?&#39;（不为空）</td></tr><tr><td><code>${method}</code></td><td>请求方法</td></tr><tr><td><code>${reqHeaders.xxx}</code></td><td>请求头字段 <code>xxx</code> 的值</td></tr><tr><td><code>${resHeaders.xxx}</code></td><td>响应头字段 <code>xxx</code> 的值</td></tr><tr><td><code>${version}</code></td><td>Whistle 版本号</td></tr><tr><td><code>${port}</code></td><td>Whitle 端口号</td></tr><tr><td><code>${host}</code></td><td>Whistle 启动时监听的网卡 IP（默认为空）</td></tr><tr><td><code>${realPort}</code></td><td>Whistle 界面 Online 对话框显示的 port（一般为 Whistle 端口号）</td></tr><tr><td><code>${realHost}</code></td><td>Whistle 界面 Online 对话框显示的 host（一般为 Whistle 监听的网卡 IP）</td></tr><tr><td><code>${clientIp}</code></td><td>客户端 IP</td></tr><tr><td><code>${clientPort}</code></td><td>客户端端口</td></tr><tr><td><code>${serverIp}</code></td><td>服务端 IP</td></tr><tr><td><code>${serverPort}</code></td><td>服务端端口</td></tr><tr><td><code>${reqCookies.xxx}</code></td><td>请求 cookie <code>xxx</code> 的值</td></tr><tr><td><code>${resCookies.xxx}</code></td><td>响应 cookie <code>xxx</code> 的值</td></tr><tr><td><code>${statusCode}</code></td><td>响应状态码</td></tr><tr><td><code>${env.xxx}</code></td><td>process.env.xxx</td></tr><tr><td><code>${whistle.plugin-name}</code></td><td><code>whistle.plugin-name://value</code> 或 <code>plugin-name://value</code> 的 <code>value</code></td></tr></tbody></table><blockquote><p><code>${whistle.plugin-name}</code> 只在插件的内部规则才可能有值</p></blockquote><h5 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h5><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` test.txt</span></span>\n<span class="line"><span>now: ${now}</span></span>\n<span class="line"><span>random: ${random}</span></span>\n<span class="line"><span>randomUUID: ${randomUUID}</span></span>\n<span class="line"><span>reqId: ${reqId}</span></span>\n<span class="line"><span>url.protocol: ${url.protocol}</span></span>\n<span class="line"><span>url.hostname: ${url.hostname}</span></span>\n<span class="line"><span>url.host: ${url.host}</span></span>\n<span class="line"><span>url.port: ${url.port}</span></span>\n<span class="line"><span>url.path: ${url.path}</span></span>\n<span class="line"><span>url.pathname: ${url.pathname}</span></span>\n<span class="line"><span>url.search; ${url.search}</span></span>\n<span class="line"><span>query: ${query.name}</span></span>\n<span class="line"><span>url: ${url}</span></span>\n<span class="line"><span>querystring: ${querystring}</span></span>\n<span class="line"><span>searchstring: ${searchstring}</span></span>\n<span class="line"><span>method: ${method}</span></span>\n<span class="line"><span>reqHeaders.accept: ${reqHeaders.accept}</span></span>\n<span class="line"><span>resHeaders.content-type: ${resHeaders.content-type}</span></span>\n<span class="line"><span>version: ${version}</span></span>\n<span class="line"><span>port: ${port}</span></span>\n<span class="line"><span>host: ${host}</span></span>\n<span class="line"><span>realPort: ${realPort}</span></span>\n<span class="line"><span>realHost: ${realHost}</span></span>\n<span class="line"><span>clientIp: ${clientIp}</span></span>\n<span class="line"><span>clientPort: ${clientPort}</span></span>\n<span class="line"><span>serverIp: ${serverIp}</span></span>\n<span class="line"><span>serverPort: ${serverPort}</span></span>\n<span class="line"><span>reqCookies.test: ${reqCookies.test}</span></span>\n<span class="line"><span>resCookies.test: ${resCookies.test}</span></span>\n<span class="line"><span>statusCode: ${statusCode}</span></span>\n<span class="line"><span>env.USER: ${env.USER}</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span></span></span>\n<span class="line"><span>www.test.com/index.html file://`{test.txt}`</span></span></code></pre></div><p>访问 <code>https://www.test.com/index.html?name=avenwu</code> 则返回响应内容：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>now: 1752301623295</span></span>\n<span class="line"><span>random: 0.6819241513880432</span></span>\n<span class="line"><span>randomUUID: e917b9fc-e2ef-4255-9209-11eb417235c5</span></span>\n<span class="line"><span>reqId: 1752301623294-339</span></span>\n<span class="line"><span>url.protocol: https:</span></span>\n<span class="line"><span>url.hostname: www.test.com</span></span>\n<span class="line"><span>url.host: www.test.com</span></span>\n<span class="line"><span>url.port: </span></span>\n<span class="line"><span>url.path: /index.html?name=avenwu</span></span>\n<span class="line"><span>url.pathname: /index.html</span></span>\n<span class="line"><span>url.search; ?name=avenwu</span></span>\n<span class="line"><span>query: avenwu</span></span>\n<span class="line"><span>url: https://www.test.com/index.html?name=avenwu</span></span>\n<span class="line"><span>querystring: ?name=avenwu</span></span>\n<span class="line"><span>searchstring: ?name=avenwu</span></span>\n<span class="line"><span>method: GET</span></span>\n<span class="line"><span>reqHeaders.accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7</span></span>\n<span class="line"><span>resHeaders.content-type: </span></span>\n<span class="line"><span>version: 2.9.100</span></span>\n<span class="line"><span>port: 8899</span></span>\n<span class="line"><span>host: </span></span>\n<span class="line"><span>realPort: 8899</span></span>\n<span class="line"><span>realHost: </span></span>\n<span class="line"><span>clientIp: 127.0.0.1</span></span>\n<span class="line"><span>clientPort: 60582</span></span>\n<span class="line"><span>serverIp: </span></span>\n<span class="line"><span>serverPort: </span></span>\n<span class="line"><span>reqCookies.test: </span></span>\n<span class="line"><span>resCookies.test: </span></span>\n<span class="line"><span>statusCode: </span></span>\n<span class="line"><span>env.USER: av</span></span></code></pre></div><h2 id="数据对象" tabindex="-1">数据对象 <a class="header-anchor" href="#数据对象" aria-label="Permalink to &quot;数据对象&quot;">​</a></h2><p>操作内容除了文本或二进制内容，还有可能是 JSON 对象，Whistle 支持以下 3 种数据对象格式：</p><h4 id="json-格式" tabindex="-1">JSON 格式 <a class="header-anchor" href="#json-格式" aria-label="Permalink to &quot;JSON 格式&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;key1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: value1,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;key2&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: value2,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;keyN&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: valueN</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="行格式" tabindex="-1">行格式 <a class="header-anchor" href="#行格式" aria-label="Permalink to &quot;行格式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>key1: value1</span></span>\n<span class="line"><span>key2:value2</span></span>\n<span class="line"><span>keyN: valueN</span></span></code></pre></div><blockquote><p>以 <code>冒号+空格</code> 分隔，如果没有 <code>冒号+空格</code> ，则以第一个冒号分隔，如果没有冒号，则 <code>value</code> 为空字符串</p></blockquote><p><strong>多级嵌套：</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>a.b.c: 123</span></span>\n<span class="line"><span>c\\.d\\.e: abc</span></span></code></pre></div><p>等价于：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;b&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;c&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>\n<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;c.d.e&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;abc&quot;</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h4 id="内联格式-请求参数格式" tabindex="-1">内联格式（请求参数格式） <a class="header-anchor" href="#内联格式-请求参数格式" aria-label="Permalink to &quot;内联格式（请求参数格式）&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>key1=value1&amp;key2=value2&amp;keyN=valueN</span></span></code></pre></div><blockquote><p><code>key</code> 和 <code>value</code> 最好都 <code>encodeURIComponent</code></p></blockquote><h2 id="操作协议" tabindex="-1">操作协议 <a class="header-anchor" href="#操作协议" aria-label="Permalink to &quot;操作协议&quot;">​</a></h2><p>每个协议（<code>protocol</code>）对应一种特定的操作类型，用于对匹配的请求进行相应处理，协议决定了操作的类型以及操作内容的格式要求，具体用法参考：<a href="./protocols.html">协议列表</a></p>',56)]))}const b=e(l,[["render",i]]);export{g as __pageData,b as default};
