import{_ as e,c as t,o as s,ag as l}from"./chunks/framework.Bw-5EFTY.js";const b=JSON.parse('{"title":"resBody","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/resBody.md","filePath":"docs/rules/resBody.md"}'),o={name:"docs/rules/resBody.md"};function d(n,a,p,r,i,h){return s(),t("div",null,a[0]||(a[0]=[l('<h1 id="resbody" tabindex="-1">resBody <a class="header-anchor" href="#resbody" aria-label="Permalink to &quot;resBody&quot;">​</a></h1><p>替换指定请求的响应内容体（仅对包含响应内容体的状态码有效，如 <code>200</code>/<code>500</code> 等）</p><blockquote><p>⚠️ 注意：204、304 等无响应内容体的请求不受影响</p></blockquote><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern resBody://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>文本或二进制内容，支持以下类型：<br>• 目录/文件路径<br>• 远程 URL<br>• 内联/内嵌/Values内容</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><h4 id="内联方式" tabindex="-1">内联方式 <a class="header-anchor" href="#内联方式" aria-label="Permalink to &quot;内联方式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path resBody://(Hello)</span></span></code></pre></div><p>请求 <code>https://www.example.com/path/to</code> 响应内容变成 <code>Hello</code>。</p><h4 id="内嵌-values方式" tabindex="-1">内嵌/Values方式 <a class="header-anchor" href="#内嵌-values方式" aria-label="Permalink to &quot;内嵌/Values方式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>``` body.txt</span></span>\n<span class="line"><span>Hello world.</span></span>\n<span class="line"><span>```</span></span>\n<span class="line"><span>www.example.com/path resBody://{body.txt}</span></span></code></pre></div><p>请求 <code>https://www.example.com/path/to</code> 响应内容变成 <code>Hello world.</code>。</p><h4 id="本地-远程资源" tabindex="-1">本地/远程资源 <a class="header-anchor" href="#本地-远程资源" aria-label="Permalink to &quot;本地/远程资源&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 resBody:///User/xxx/test.txt</span></span>\n<span class="line"><span>www.example.com/path2 resBody://https://www.xxx.com/xxx/params.txt</span></span>\n<span class="line"><span># 通过编辑临时文件</span></span>\n<span class="line"><span>www.example.com/path3 resBody://temp/blank.txt</span></span></code></pre></div><h2 id="关联协议" tabindex="-1">关联协议 <a class="header-anchor" href="#关联协议" aria-label="Permalink to &quot;关联协议&quot;">​</a></h2><ol><li>在响应内容前面注入内容：<a href="./resPrepend.html">resPrepend</a></li><li>在响应内容后面追加内容：<a href="./resAppend.html">resAppend</a></li><li>替换请求内容：<a href="./reqBody.html">reqBody</a></li></ol>',17)]))}const u=e(o,[["render",d]]);export{b as __pageData,u as default};
