import{_ as e,c as a,o as l,ae as s}from"./chunks/framework.Dgg8-8ov.js";const m=JSON.parse('{"title":"htmlBody","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/htmlBody.md","filePath":"docs/rules/htmlBody.md"}'),o={name:"docs/rules/htmlBody.md"};function p(n,t,d,i,c,h){return l(),a("div",null,t[0]||(t[0]=[s(`<h1 id="htmlbody" tabindex="-1">htmlBody <a class="header-anchor" href="#htmlbody" aria-label="Permalink to &quot;htmlBody&quot;">​</a></h1><p>将现有响应内容体t替换成指定内容（仅对响应类型 <code>content-type</code> 包含 <code>html</code>，且包含响应内容体的状态码（如 <code>200</code>/<code>500</code> 等）有才效）</p><blockquote><p>⚠️ 注意：204、304 等无响应内容体的请求不受影响</p></blockquote><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern htmlBody://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>文本或二进制内容，支持以下类型：<br>• 目录/文件路径<br>• 远程 URL<br>• 内联/内嵌/Values内容</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><h4 id="内联方式" tabindex="-1">内联方式 <a class="header-anchor" href="#内联方式" aria-label="Permalink to &quot;内联方式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path htmlBody://(Hello) file://(-test-)</span></span>
<span class="line"><span>www.example.com/path2 htmlBody://(Hello) file://(-test-) resType://js</span></span></code></pre></div><ul><li>请求 <code>https://www.example.com/path/to</code> 响应内容变成 <code>Hello</code></li><li>请求 <code>https://www.example.com/path2/to</code> 响应内容变成 <code>-test-</code></li></ul><h4 id="内嵌-values方式" tabindex="-1">内嵌/Values方式 <a class="header-anchor" href="#内嵌-values方式" aria-label="Permalink to &quot;内嵌/Values方式&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\`\`\` body.txt</span></span>
<span class="line"><span>Hello world.</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path htmlBody://{body.txt} file://(-test-)</span></span>
<span class="line"><span>www.example.com/path2 htmlBody://{body.txt} file://(-test-) resType://css</span></span></code></pre></div><ul><li>请求 <code>https://www.example.com/path/to</code> 响应内容变成 <code>Hello world.</code></li><li>请求 <code>https://www.example.com/path2/to</code> 响应内容变成 <code>-test-</code></li></ul><h4 id="规避不规范的请求" tabindex="-1">规避不规范的请求 <a class="header-anchor" href="#规避不规范的请求" aria-label="Permalink to &quot;规避不规范的请求&quot;">​</a></h4><p>当接口响应类型（<code>Content-Type</code>）不规范地返回为 <code>text/html</code> 时，可能导致：</p><ul><li>前端误将接口数据当作 HTML 解析</li><li>注入内容破坏原始数据结构</li><li>引发前端解析错误</li></ul><p>使用 enable://strictHtml 或 enable://safeHtml 模式保护非 HTML 内容：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 htmlBody://(test) file://(-test-) enable://strictHtml</span></span>
<span class="line"><span>www.example.com/path2 htmlBody://(test) file://([-test-])  enable://strictHtml</span></span>
<span class="line"><span>www.example.com/path3 htmlBody://(test) file://([-test-])  enable://safeHtml</span></span>
<span class="line"><span>www.example.com/path4 htmlBody://(test) file://(&lt;div&gt;Test&lt;/div&gt;) enable://strictHtml</span></span></code></pre></div><ul><li>请求 <code>https://www.example.com/path1/to</code> 响应内容变成 <code>-test-</code></li><li>请求 <code>https://www.example.com/path2/to</code> 响应内容变成 <code>[-test-]</code></li><li>请求 <code>https://www.example.com/path3/to</code> 响应内容变成 <code>[-test-]</code></li><li>请求 <code>https://www.example.com/path4/to</code> 响应内容变成 <code>test</code></li></ul><p><code>safeHtml</code>/<code>strictHtml</code> 功能参考：<a href="./enable.html">enable://safeHtml</a>、<a href="./lineProps.html">lineProps://strictHtml</a></p><h4 id="本地-远程资源" tabindex="-1">本地/远程资源 <a class="header-anchor" href="#本地-远程资源" aria-label="Permalink to &quot;本地/远程资源&quot;">​</a></h4><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/path1 htmlBody:///User/xxx/test.txt</span></span>
<span class="line"><span>www.example.com/path2 htmlBody://https://www.xxx.com/xxx/params.txt</span></span>
<span class="line"><span># 通过编辑临时文件</span></span>
<span class="line"><span>www.example.com/path3 htmlBody://temp/blank.txt</span></span></code></pre></div><h2 id="关联协议" tabindex="-1">关联协议 <a class="header-anchor" href="#关联协议" aria-label="Permalink to &quot;关联协议&quot;">​</a></h2><ol><li>替换响应内容：<a href="./resBody.html">resBody</a></li><li>在 HTML 类型的响应内容前面注入内容：<a href="./htmlPrepend.html">htmlPrepend</a></li><li>在 HTML 类型的响应内容后面注入内容：<a href="./htmlBody.html">htmlBody</a></li><li>校验 HTML 内容格式：<a href="./enable.html">enable://safeHtml</a>、<a href="./lineProps.html">lineProps://strictHtml</a></li></ol>`,24)]))}const b=e(o,[["render",p]]);export{m as __pageData,b as default};
