import{_ as e,c as s,o as t,ae as n}from"./chunks/framework.Dgg8-8ov.js";const u=JSON.parse('{"title":"socks","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/socks.md","filePath":"en/docs/rules/socks.md"}'),o={name:"en/docs/rules/socks.md"};function p(i,a,l,r,c,d){return t(),s("div",null,a[0]||(a[0]=[n(`<h1 id="socks" tabindex="-1">socks <a class="header-anchor" href="#socks" aria-label="Permalink to &quot;socks&quot;">​</a></h1><p>The <code>socks</code> directive is used to forward matching requests through a specified SOCKS5 proxy server.</p><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern socks://ipOrDomain[:port] [filters...]</span></span></code></pre></div><blockquote><p><code>port</code> is optional. If left blank, the default port <code>443</code> will be used.</p></blockquote><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>An expression to match the request URL</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>value</td><td>IP + optional port or domain name + optional port<br>⚠️ Loading data from files/remote URLs is not supported</td><td><a href="./operation.html">Operation Instruction Documentation</a></td></tr><tr><td>filters</td><td>Optional filters. Supports matching:<br>• Request URL/Method/Headers/Content<br>• Response Status Code/Headers</td><td><a href="./filters.html">Filters Documentation</a></td></tr></tbody></table><h2 id="configuration-example" tabindex="-1">Configuration Example <a class="header-anchor" href="#configuration-example" aria-label="Permalink to &quot;Configuration Example&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Proxy requests to a SOCKS5 proxy: \`127.0.0.1:443\`</span></span>
<span class="line"><span>www.example.com/path socks://127.0.0.1 # Default port 443</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Proxy all requests for the current domain to the SOCKS5 proxy: \`127.0.0.1:8080\`</span></span>
<span class="line"><span>www.example.com socks://127.0.0.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># You can also use a domain name.</span></span>
<span class="line"><span>www.example.com/path socks://test.proxy.com # Default port 443</span></span>
<span class="line"><span>www.example.com socks://test.proxy.com:8080</span></span></code></pre></div><h2 id="advanced-usage" tabindex="-1">Advanced Usage <a class="header-anchor" href="#advanced-usage" aria-label="Permalink to &quot;Advanced Usage&quot;">​</a></h2><p>By default, the upstream proxy resolves the requested domain name. However, in some scenarios, you may want to force the proxy to access a specific target IP directly (skipping DNS resolution), for example:</p><ul><li>Bypassing DNS poisoning</li><li>Directly accessing a specific backend IP</li><li>Testing services in different environments</li></ul><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Using query parameters</span></span>
<span class="line"><span>www.example.com socks://127.0.0.1:8080?host=1.1.1.1</span></span>
<span class="line"><span>www.example.com socks://127.0.0.1:8080?host=1.1.1.1:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Enabling via directives</span></span>
<span class="line"><span>www.example.com socks://127.0.0.1:8080 1.1.1.1 enable://proxyHost</span></span>
<span class="line"><span>www.example.com socks://127.0.0.1:8080 1.1.1.1:8080 enable://proxyHost</span></span></code></pre></div><blockquote><p><code>1.1.1.1</code> is equivalent to <code>host://1.1.1.1</code></p></blockquote>`,13)]))}const m=e(o,[["render",p]]);export{u as __pageData,m as default};
