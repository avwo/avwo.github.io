import{_ as t,c as e,o as s,ae as n}from"./chunks/framework.Dgg8-8ov.js";const b=JSON.parse('{"title":"host","description":"","frontmatter":{},"headers":[],"relativePath":"docs/rules/host.md","filePath":"docs/rules/host.md"}'),o={name:"docs/rules/host.md"};function l(p,a,d,i,r,h){return s(),e("div",null,a[0]||(a[0]=[n(`<h1 id="host" tabindex="-1">host <a class="header-anchor" href="#host" aria-label="Permalink to &quot;host&quot;">​</a></h1><p>修改请求的 DNS 解析结果，将指定请求解析到特定 IP 地址（域名）及端口，可以看作终极版的系统 hosts 配置功能。</p><h2 id="规则语法" tabindex="-1">规则语法 <a class="header-anchor" href="#规则语法" aria-label="Permalink to &quot;规则语法&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern host://ipOrDomain[:port] [filters...]</span></span></code></pre></div><blockquote><p><code>port</code> 如果不填，则沿用请求 URL 的原始端口，如果是指向域名则相当于 <code>cname</code> 功能</p></blockquote><table tabindex="0"><thead><tr><th>参数</th><th>描述</th><th>详细文档</th></tr></thead><tbody><tr><td>pattern</td><td>匹配请求 URL 的表达式</td><td><a href="./pattern.html">匹配模式文档</a></td></tr><tr><td>value</td><td>IP + 可选端口 或域名 + 可选端口<br>⚠️ 不支持从文件/远程 URL 加载数据</td><td><a href="./operation.html">操作指令文档</a></td></tr><tr><td>filters</td><td>可选过滤器，支持匹配：<br>• 请求URL/方法/头部/内容<br>• 响应状态码/头部</td><td><a href="./filters.html">过滤器文档</a></td></tr></tbody></table><h2 id="配置示例" tabindex="-1">配置示例 <a class="header-anchor" href="#配置示例" aria-label="Permalink to &quot;配置示例&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 如果只是 IP 或端口可以省略 \`host://\`</span></span>
<span class="line"><span>www.example.com/test0 127.0.0.1      # 不改端口，沿用请求 URL 的原始端口</span></span>
<span class="line"><span>www.example.com/test1 127.0.0.1:5173</span></span>
<span class="line"><span></span></span>
<span class="line"><span># CNAME 功能</span></span>
<span class="line"><span>www.example.com/test2 host://www.test.com</span></span>
<span class="line"><span>www.example.com/test3 host://www.test.com:8080</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 高级配置，从请求参数获取目标地址，includeFilter 确保存在该参数</span></span>
<span class="line"><span>www.example.com/test4 host://\`\${query.target}$:8080\` includeFilter:///[?&amp;]target=[\\w-]+/i</span></span></code></pre></div><h2 id="与-proxy-的匹配优先级" tabindex="-1">与 proxy 的匹配优先级 <a class="header-anchor" href="#与-proxy-的匹配优先级" aria-label="Permalink to &quot;与 proxy 的匹配优先级&quot;">​</a></h2><p>以下是优化后的文档，结构更清晰，语言更简洁准确：</p><hr><h2 id="与-host-的匹配优先级" tabindex="-1">与 host 的匹配优先级 <a class="header-anchor" href="#与-host-的匹配优先级" aria-label="Permalink to &quot;与 host 的匹配优先级&quot;">​</a></h2><h4 id="默认行为" tabindex="-1">默认行为 <a class="header-anchor" href="#默认行为" aria-label="Permalink to &quot;默认行为&quot;">​</a></h4><p>当请求同时匹配 <code>host</code> 和 <code>proxy</code> 规则时：</p><ul><li>仅 <code>host</code> 规则生效</li><li><code>proxy</code> 规则自动忽略</li></ul><h4 id="修改优先级" tabindex="-1">修改优先级 <a class="header-anchor" href="#修改优先级" aria-label="Permalink to &quot;修改优先级&quot;">​</a></h4><table tabindex="0"><thead><tr><th>配置方式</th><th>语法</th><th>效果</th></tr></thead><tbody><tr><td><strong>优先 proxy</strong></td><td><a href="./enable.html"><code>enable://proxyFirst</code></a> 或 <a href="./lineProps.html"><code>lineProps://proxyFirst</code></a></td><td>仅 <code>proxy</code> 生效（覆盖 host）</td></tr><tr><td><strong>同时生效</strong></td><td><a href="./enable.html"><code>enable://proxyHost</code></a> 或 <a href="./lineProps.html"><code>lineProps://proxyHost</code></a></td><td><code>proxy</code> 和 <code>host</code> 同时生效</td></tr></tbody></table><h4 id="使用建议" tabindex="-1">使用建议 <a class="header-anchor" href="#使用建议" aria-label="Permalink to &quot;使用建议&quot;">​</a></h4><ul><li>大多数场景使用默认行为即可</li><li>需要特殊代理逻辑时才使用 <code>proxyFirst</code></li><li>需要双重匹配时使用 <code>proxyHost</code></li></ul><h2 id="常见问题" tabindex="-1">常见问题 <a class="header-anchor" href="#常见问题" aria-label="Permalink to &quot;常见问题&quot;">​</a></h2><ol><li>与 URL 转换的区别：<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 服务端收到的 URL 还是 www.example.com</span></span>
<span class="line"><span>www.example.com 127.0.0.1:5173</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 服务端收到的 URL 是 http://127.0.0.1:5173</span></span>
<span class="line"><span>www.example.com http://127.0.0.1:5173</span></span></code></pre></div></li><li>自动降级为 HTTP 请求：如果配置的目标 IP 为 <code>127.0.0.1</code>，且 HTTPS 请求报错会自动降级为 HTTP 请求，方便访问本地服务，用户可以通过以下规则禁用该功能：<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># 禁用本地 HTTPS 自动降级</span></span>
<span class="line"><span>pattern disable://auto2http</span></span></code></pre></div></li></ol>`,21)]))}const u=t(o,[["render",l]]);export{b as __pageData,u as default};
