import{_ as a,c as t,o as s,ag as n}from"./chunks/framework.Bw-5EFTY.js";const u=JSON.parse('{"title":"pac","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/pac.md","filePath":"en/docs/rules/pac.md"}'),p={name:"en/docs/rules/pac.md"};function o(i,e,c,l,r,d){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="pac" tabindex="-1">pac <a class="header-anchor" href="#pac" aria-label="Permalink to &quot;pac&quot;">​</a></h1><p>Proxy Auto-Config (PAC) is a mechanism that automatically determines request proxy rules using JavaScript scripts, allowing you to dynamically select a proxy or direct connection based on criteria such as URL, domain name, and IP address.</p><h2 id="rule-syntax" tabindex="-1">Rule Syntax <a class="header-anchor" href="#rule-syntax" aria-label="Permalink to &quot;Rule Syntax&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pattern pac://value [filters...]</span></span></code></pre></div><table tabindex="0"><thead><tr><th>Parameters</th><th>Description</th><th>Detailed Documentation</th></tr></thead><tbody><tr><td>pattern</td><td>Expression to match request URLs</td><td><a href="./pattern.html">Match Pattern Documentation</a></td></tr><tr><td>value</td><td>Operation content, supports the following types:<br>• Directory/File Path<br>• Remote URL<br>• Inline/Embedded/Values content</td><td><a href="./operation.html">Operation Instruction Documentation</a></td></tr><tr><td>filters</td><td>Optional filters, supports matching:<br>• Request URL/Method/Header/Content<br>• Response Status Code/Header</td><td><a href="./filters.html">Filter Documentation</a></td></tr></tbody></table><h2 id="configuration-example" tabindex="-1">Configuration Example <a class="header-anchor" href="#configuration-example" aria-label="Permalink to &quot;Configuration Example&quot;">​</a></h2><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Embedded PAC Script</span></span>
<span class="line"><span>\`\`\` test.pac</span></span>
<span class="line"><span>function FindProxyForURL(url, host) {</span></span>
<span class="line"><span>  // ...</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span>\`\`\`</span></span>
<span class="line"><span>www.example.com/path pac://{test.pac}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Values</span></span>
<span class="line"><span>www.example.com/path1 pac://{test2.pac}</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Local File</span></span>
<span class="line"><span>www.example.com/path3 pac:///User/xxx/test.pac</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Remote PAC Script</span></span>
<span class="line"><span>* pac://https://raw.githubusercontent.com/imweb/node-pac/master/test/scripts/normal.pac</span></span></code></pre></div><h2 id="advanced-usage" tabindex="-1">Advanced Usage <a class="header-anchor" href="#advanced-usage" aria-label="Permalink to &quot;Advanced Usage&quot;">​</a></h2><p>After proxying a request to an upstream proxy, by default the upstream proxy will use DNS to obtain the server IP address based on the requested domain name before continuing the request. If you want the upstream proxy to continue the request based on a specific IP address and port, you can do this:</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com pac://https://xxx/path/normal.pac 1.1.1.1 enable://proxyHost</span></span>
<span class="line"><span>www.example.com pac:///User/xxx/test.pac 1.1.1.1:8080 enable://proxyHost</span></span></code></pre></div><blockquote><p><code>1.1.1.1</code> Equivalent to <code>host://1.1.1.1</code></p></blockquote><h2 id="notes" tabindex="-1">Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;Notes&quot;">​</a></h2><p>The <code>pac</code> protocol only applies to the substituted URL (i.e., the <code>Final URL</code> shown in the Overview). If the <code>Final URL</code> is empty, it will take effect on the original request URL.</p><p>For example, with the rule:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/api www.example.com pac://https://xxx/path/normal.pac</span></span></code></pre></div><p>When a request is made to <code>https://www.example.com/api/path</code>, Whistle processes it and changes the URL to <code>https://www.example.com/path</code> (this becomes the <code>Final URL</code>). Although the intention is to apply the PAC script <code>https://xxx/path/normal.pac</code> to <code>https://www.example.com/path</code>, the <code>pac</code> rule only matches the original domain <code>www.example.com/api</code> before substitution. Since the converted <code>Final URL</code> is now <code>www.example.com/path</code>, this rule will not be triggered.</p><p>To ensure the rule also applies to the substituted request, you can break it into two separate rules:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>www.example.com/api www.example.com  </span></span>
<span class="line"><span>www.example.com pac://https://xxx/path/normal.pac</span></span></code></pre></div><p>This way, the original request is first rewritten by the first rule, generating a new <code>Final URL</code>. Then, the second <code>pac</code> rule matches this new URL.</p>`,19)]))}const m=a(p,[["render",o]]);export{u as __pageData,m as default};
