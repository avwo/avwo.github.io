import{_ as t,c as a,o as s,ag as n}from"./chunks/framework.Bw-5EFTY.js";const h=JSON.parse('{"title":"@ Symbol Usage","description":"","frontmatter":{},"headers":[],"relativePath":"en/docs/rules/@.md","filePath":"en/docs/rules/@.md"}'),p={name:"en/docs/rules/@.md"};function i(o,e,r,c,l,d){return s(),a("div",null,e[0]||(e[0]=[n(`<h1 id="symbol-usage" tabindex="-1"><code>@</code> Symbol Usage <a class="header-anchor" href="#symbol-usage" aria-label="Permalink to &quot;\`@\` Symbol Usage&quot;">​</a></h1><p>Using the <code>@</code> symbol in rules is useful when you want to store rules on a remote server or in a local project file and have Whistle automatically synchronize updates; or when the server requires mutual authentication (mTLS).</p><h2 id="importing-a-rule-file-path" tabindex="-1">Importing a rule file (<code>@path</code>) <a class="header-anchor" href="#importing-a-rule-file-path" aria-label="Permalink to &quot;Importing a rule file (\`@path\`)&quot;">​</a></h2><p><strong>Function:</strong> Dynamically load the contents of an external rule file (supports automatic refresh)</p><p><strong>Format:</strong> <code>@filepathorurl</code></p><p><strong>Supported types:</strong></p><ul><li>Remote URL: <code>@https://example.com/rules.txt</code></li><li>Local file: <code>@~/projects/rules.txt</code> (supports all operating system paths)</li><li>Plugin interface: <code>@whistle.nohost/api/rules</code> (requires plugin implementation)</li></ul><blockquote><p>Windows paths can use a mix of / and :</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@C:/whistle/rules.txt</span></span>
<span class="line"><span>@D:\\config\\proxy.rules</span></span></code></pre></div></blockquote><h2 id="configuring-the-client-certificate-clientcert" tabindex="-1">Configuring the client certificate (<code>@clientCert://</code>) <a class="header-anchor" href="#configuring-the-client-certificate-clientcert" aria-label="Permalink to &quot;Configuring the client certificate (\`@clientCert://\`)&quot;">​</a></h2><p><strong>Function:</strong> Specify a client certificate for mutual authentication (mTLS) requests</p><blockquote><p>Recommend switching to the <a href="./cipher.html">tlsOptions</a> configuration option</p></blockquote><p><strong>Format:</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>@clientCert://key=private key path&amp;cert=cert or pem certificate path</span></span>
<span class="line"><span>or</span></span>
<span class="line"><span>@clientCert://pwd=passphrase&amp;cert=pfx or p12 certificate path</span></span></code></pre></div><p><strong>Supported types:</strong></p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># cert format certificate</span></span>
<span class="line"><span>pattern @clientCert://key=/User/xxx/test.key&amp;cert=/User/xxx/test.crt</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pem format certificate</span></span>
<span class="line"><span>pattern @clientCert://key=E:\\test.pem&amp;cert=E:\\test.pem</span></span>
<span class="line"><span></span></span>
<span class="line"><span># pfx format certificate</span></span>
<span class="line"><span>pattern @clientCert://pwd=passphrase&amp;pfx=/User/xxx/test.pfx</span></span>
<span class="line"><span></span></span>
<span class="line"><span># p12 format certificate</span></span>
<span class="line"><span>pattern @clientCert://pwd=passphrase&amp;pfx=E:/test.p12</span></span></code></pre></div><p>Windows paths can use a mix of <code>/</code> and <code>\\</code></p>`,16)]))}const m=t(p,[["render",i]]);export{h as __pageData,m as default};
